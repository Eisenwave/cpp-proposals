\import{libwg21.cow}

\style{
.five-way-poll {
    table-layout: fixed;
}
.five-way-poll td {
    width: 20%;
    text-align: center;
}
}

\macro[\five_way_poll]{\table[class=five-way-poll]{
\tr{\th{SF}\th{F}\th{N}\th{A}\th{SA}}
\tr{\td{\put{0}} \td{\put{1}} \td{\put{2}} \td{\put{3}} \td{\put{4}}}
}}

\wg21-head[
    title = Last chance to fix \tcode{std::nontype}
]{
\dl{
    \dt{Document number:} \dd{\docnum{P3740R1}}
    \dt{Date:}            \dd{\tt{2025-06-20}}
    \dt{Audience:}        \dd{LEWG}
    \dt{Project:}         \dd{ISO/IEC 14882 Programming Languages — C++, ISO/IEC JTC1/SC22/WG21}
    \dt{Reply-to:}        \dd{Jan Schultke <\mail{janschultke@gmail.com}>}
    \dt{Co-authors:}      \dd{Bronek Kozicki <\mail{brok@incorrekt.com}>}
    \dt{GitHub Issue:}    \dd{\ref[https://wg21.link/P3740/github]}
    \dt{Source:}          \dd{\ref[https://github.com/Eisenwave/cpp-proposals/blob/master/src/nontype.cow]}
}
\hr
}

\Babstract{
P2472R3 introduced overloads for the \tcode{std::function_ref}
constructor which utilize a helper type \tcode{std::nontype}.
This helper type may be obsoleted by other active proposals,
and its name has become a bad choice now that C++26 no longer replaced the term
"non-type template parameter",
with "constant template parameter".
}
\h2[listed=no]{Contents}

\make-contents

\h2{Revision history}

\h3{Changes since R0}

\ul{
  \li{
    abandoned the use of a \tcode{std::stateless} constructor tag,
    as it became apparent that this approach has little chance of finding consensus  
  }
  \li{
    instead investigated feasibility of using \tcode{std::constant_wrapper} instead of
    \tcode{std::nontype}, with proposed wording for that approach
  }
}

\h2{Introduction}

\ref[P2472R3] proposed additional overloads for the \tcode{std::function_ref}
constructor which utilize a helper type \tcode{std::nontype}.
This paper was merged into \ref[P0792R14],
which was plenary-approved at Varna 2023 for C++26.

There is now a proposal \ref[P2781R8] on track for C++29 which adds a
\tcode{std::constant_wrapper} helper type,
and this could be a plausible replacement for \tcode{std::nontype}.
Considering that, do we even need \tcode{std::nontype}?
Furthermore, the naming choice \tcode{std::nontype} makes very little sense
following \ref[P2841R1], which introduced concept and variable template parameters.
Since those are not types either, what the standard used to call
"non-type template parameter" has been renamed to "constant template parameter".

In short, we now have to decide \em{for C++26} whether \tcode{std::nontype}
should be renamed (and if so, what to),
whether it should be merged with \tcode{std::constant_wrapper},
or whether these constructor overloads should be delayed until C++29.

\Bnote{
The class template is called \tcode{std::nontype_t},
and the corresponding variable template is called \tcode{std::nontype}.
This document refers to the feature as a whole as \tcode{std::nontype}.
}

\h3[id=why-did-we-need-nontype]{Why did we need a new \tcode{std::nontype} type?}

An obvious question may be why the existing \tcode{std::integral_constant}
cannot be used instead.
This has multiple reasons:
\ul{
  \li{\tcode{std::integral_constant<class T, T v>} requires specifying the type separately.}
  \li{\tcode{std::integral_constant} has a lengthy name.}
  \li{\tcode{std::integral_constant} has a call operator which returns \tcode{v},
  which produces friction with the other constructors.}
}

\h3[id=nontype-refresher]{Refresher on what \tcode{std::nontype} accomplishes}

\tcode{std::nontype} is used only within constructors of \tcode{std::function_ref}:

\cppblock{
// constexpr and noexcept omitted for simplicity
template<class F>         function_ref(F*);
template<class F>         function_ref(F&&);
template<auto f>          function_ref(nontype_t<f>);
template<auto f, class U> function_ref(nontype_t<f>, U&&);
template<auto f, class T> function_ref(nontype_t<f>, \exposid{cv} T*);
}

Intuitively, \tcode{std::function_ref} is the C++ counterpart to the C idiom of passing
\tcode{void*} and a function pointer which that \tcode{void*} is fed into,
as seen in \tcode{qsort}.
It is common practice to provide a null pointer to \tcode{qsort}
and thus rely on a "capture-less" comparison.

With \tcode{std::nontype}, \tcode{std::function_ref} can support such use "capture-less" uses:

\cppblock{
// once again, some simplifications (no noexcept, no invoke, etc.) ...
template<auto f>
function_ref(nontype_t<f>) {
  // bound-entity is similar to the void* we would have stored in C.
  // We can leave it empty since we are constructing from some global callable.
  this->\exposid{bound-entity} = {};
  // Note that lambdas with no captures can be converted to function pointers.
  this->\exposid{thunk-ptr} = [](\exposid{BoundEntityType}, Args&&... args) -> R {
    // Notice that we don't need to capture f.
    // This is only possible because f is a constant template parameter.
    return f(std::forward<Args&&>(args)...);
  };
}
}

Crucially, it would be impossible to create a \tcode{std::function_ref}
from a function directly without this helper.
At best, we could store function pointer within \placeholder{bound-entity}
and call that function pointer from within \placeholder{bound-entity}.
This would introduce entirely unnecessary overhead.

Besides overhead, we need \tcode{std::nontype} constructors to make a \tcode{std::function_ref}
which has the functionality provided by a lambda,
but does not reference any specific lambda.
This is crucial for being able to store \tcode{std::function_ref} somewhere long-term
without paying attention to the lifetime of the callable type it has been initialized with.

\h2{Options considered}

Besides the proposed approach,
there are other possible solutions.
However, the author position is that every one of them is worse than what is proposed.

\h3[id=stateless]{Using a \tcode{std::stateless} constructor tag instead}

\Bimp{
This approach was the author's proposed solution in R0.
Despite not polling in LEWG on this issue,
it was readily apparent that the room had no appetite for this change in direction.
In particular, the \tcode{std::nontype} technique is less verbose at the call site,
which convinced multiple attendees that it would be the superior approach.

A more detailed discussion and proposed wording for this approach can be found
in R0 of this paper.
}

We can ditch \tcode{std::nontype} and obtain the functionality it provides in a different way.
This would be very tempting because we don't have the dilemma of naming it right,
making it redundant with \tcode{std::constant_wrapper},
having a weird workaround that becomes obsolete with \tcode{constexpr} function parameters, etc.
Instead, we can get the same functionality using a tagged constructor.

The crucial observation in \ref[#nontype-refresher] is that the lambda we create for
\placeholder{thunk-ptr} cannot capture the constructor parameters.
However, that is not actually necessary if we only need the type of the parameter,
not its identity.
The same approach is used for \tcode{std::less}, \tcode{std::allocator}, \tcode{std::hash}, etc.
We don't need to hold an instance of these; we can just default-construct when needed.
Specifically, the tagged constructor would function like:

\cppblock{
// Helper tag type.
struct stateless_t { };
inline constexpr stateless_t stateless;

// once again, some simplifications (no noexcept, no invoke, etc.) ...
template<class F, class T>
function_ref(stateless_t, const F&, \exposid{cv} T* obj) {
  // In practice, this may be slightly more complicated, if BoundEntityType is not just void*.
  this->\exposid{bound-entity} = obj;

  this->\exposid{thunk-ptr} = [](\exposid{BoundEntityType} \exposid{bound}, Args&&... args) -> R {
    auto obj = static_cast<\exposid{cv} T*>(bound);
    // No captures needed because we construct a new T here.
    return F{}(obj, std::forward<Args&&>(args)...);
  };
}

// Same idea, but bound-entity becomes null:
template<class F> function_ref(stateless_t, const F&);
// Same idea, but bound-entity becomes addressof(obj):
template<class F, class U> function_ref(stateless_t, U&& obj);
}

\h3{Removing \tcode{std::nontype} with no replacement, revisiting for C++29}

Since there is a lot of active work in this area,
perhaps we could simply shove \tcode{std::nontype} into C++29 and deal with the problem later.
However, as demonstrated in \ref[#nontype-refresher],
this helper type covers crucial use cases such as

\ul{
  \li{constructing \tcode{std::function_ref} from a free function with no overhead, or}
  \li{constructing \tcode{std::function_ref} from an existing function pointer and \tcode{void*},
  in the style of \tcode{qsort}.}
}

\b{Author position}:
The functionality provided by \tcode{std::nontype} is a crucial part of \tcode{std::function_ref},
not a nice-to-have feature that can be ripped out.
\tcode{std::function_ref} without these constructors would be akin
to using containers without move semantics.

\h3{Waiting for \tcode{constexpr} function parameters}

\tcode{std::integral_constant}, \tcode{std::constant_wrapper}, and \tcode{std::nontype}
are \N{EN DASH} to an extent \N{EN DASH} temporary hacks.
If we were able to write
\cppblock{
function_ref(constexpr F*);
}
\N{HORIZONTAL ELLIPSIS} then the workaround of \tcode{std::nontype} would be obsolete.

At Kona 2023, EWG showed enthusiasm for this option
when discussing \ref[P1045R1] "\tcode{constexpr} Function parameters".

\Bquote{
Poll: P2781R3 “std::constexpr_v” and P1045R1 “constexpr function parameters”
EWG would like to solve th eproblem solved by std::constexpr_v in the language,
for example as proposed by P1045R1 or with “expression aliases”,
rather than solving it in library.
An implementation is desired. C++26 seems ambitious.

\five_way_poll[6,8,5,1,0]
}

However, \ref[P1045R1] has not seen any seen any activity from the author since 2019.
As nice as a core language solution would be,
standard library features cannot be built on on hopes, dreams, and unimplemented hypotheticals.
Even if \tcode{constexpr} function parameters were eventually implemented,
it may be possible to integrate them into the existing set of constructors
and to deprecate \tcode{std::nontype}.

\b{Author position}:
Overall, there is little reason to treat \tcode{constexpr} function parameters
as a prerequisite; we don't need to wait.

\h3[id=using-constant-wrapper]{Replacing \tcode{std::nontype} with \tcode{std::constant_wrapper}}

The seemingly obvious solution is to use \tcode{std::constant_wrapper} from \ref[P2781R8].
The option to use \tcode{std::constant_wrapper} as a replacement for \tcode{std::nontype}
was discussed during an LEWG telecon 2025-03-11.
Major concerns have been raised at the time,
but after gaining implementation experience,
these have been addressed.
In particular:
\ul{
  \li{
    \tcode{std::constant_wrapper} already has a call operator
    (which returns a \tcode{std::constant_wrapper})
    and is convertible to its wrapped constant,
    so this was suspected to cause issues in the constructor overload set or otherwise.
    However, the other overloads taking \tcode{std::nontype} (now \tcode{std::constant_wrapper})
    would always win in overload resolution,
    so the extra functionality is inconsequential.
  }
  \li{
    \tcode{std::constant_wrapper} could be used with other
    function wrappers (\tcode{std::move_only_function} etc.) in some cases already (see below),
    and its behavior would be inconsistent with \tcode{std::function_ref}.
    We address this by adding corresponding overloads to other function wrapper constructors.
  }
}

\Bex{
To illustrate the second point, the following code
would compile without \tcode{std::constant_wrapper} being treated specially
by \tcode{std::move_only_function}.
\cppblock{
constexpr int f() { return 0; }
std::move_only_function<int()> r = std::cw<f>;
}
This works because the type of \tcode{std::cw<f>} has a call operator
which returns \tcode{std::cw<0>} in this case,
which is convertible to \tcode{int}.
}

\b{Author position}:
Considering that \tcode{std::nontype} is intended to wrap a constant,
much like \tcode{std::constant_wrapper}.
If this can be done with no major technical issues,
it presumably \em{should} be done.
However, if we do this, we have to add corresponding support for \tcode{std::constant_wrapper}
for other function wrappers so that the use of \tcode{std::constant_wrapper}
is not subtly different for different wrappers.
Also, this can only be done now;
adding support for that in C++29 risks altering the meaning of existing C++26 code which uses \tcode{std::constant_wrapper}.

\h3{Exposing the \placeholder{BoundEntityType}}

Remember the example in \ref[#nontype-refresher].
Our end goal is to enable more possible constructions of \tcode{std::function_ref}.
Technically, this could be done by ripping the implementation open and exposing its details:

\cppblock{
// new constructor
function_ref(R(*thunk)(\exposid{BoundEntityType}, Args&&...), \exposid{BoundEntityType} entity = { })
  : \exposid{thunk-ptr}(thunk)
  , \exposid{bound-entity}(entity) { }
}

However, this means that the user directly interacts with \exposid{BoundEntityType},
and this is a detail which may vary from implementation to implementation.
For implementations that support conversion between function pointers and \tcode{void*},
\exposid{BoundEntityType} could simply be \tcode{\exposid{cv} void*},
but this may also be a \tcode{union}, it may be multiple pointers large, etc.

\b{Author position}:
Exposing the \placeholder{BoundEntityType} to the user seems like a bad idea,
and it would encourage writing code that is inadvertently not portable.

\h3[id=renaming-nontype]{Renaming \tcode{std::nontype}}

Perhaps the most simple solution is to simply rename \tcode{std::nontype}.
However, no good candidate with high consensus has been presented yet,
and many options would be awfully similar to \tcode{std::constant_wrapper},
creating confusion:

\ul{
  \li{
    \tcode{std::constant} seems almost like a "more official"
    alternative to \tcode{std::constant_wrapper},
    when this type is extremely limited on scope.
  }
  \li{
    \tcode{std::ctp}, \tcode{std::cta}, \tcode{std::ct} and other abbreviations derived from
    "constant template argument/parameter" feel out-of-place in the standard library,
    and cannibalize \tcode{std::cw},
    the variable template for \tcode{std::constant_wrapper}.
  }
  \li{
    \tcode{std::const_arg}, \tcode{std::constant_arg}, \tcode{std::constexpr_arg}
    and other such names describe the purpose of the type well,
    but are still reminiscent of \tcode{std::constant_wrapper}.
  }
}

\b{Author position}:
Renaming \tcode{std::nontype} is not trivial,
and it's unlikely that any solution will make everyone happy.
Of all the options, \tcode{std::constant_arg} seems like the least bad candidate.

\h3{Conclusion}

Every alternative seems bad in its own way,
but \ref[#using-constant-wrapper] seems most obvious,
and \ref[#renaming-nontype] seems least intrusive.
These are definitely something that we could do for C++26.

\Bnote{
In \ref[#wording], both the wording for \ref[#using-constant-wrapper]
and for \ref[#renaming-nontype] is presented.
}

\h2{Implementation experience}

\ref[#renaming-nontype] requires no implementation experience
because it is merely changing the name of a symbol.

\ref[#using-constant-wrapper] was implemented at \ref[GitHub1].
This was done by forking the existing reference implementation of \ref[P0792R14].
This implementation already had \tcode{std::move_only_function} and \tcode{std::function}
constructors taking \tcode{std::nontype} and has been thoroughly tested,
which made it easy to verify that \tcode{std::constant_wrapper} could be used instead.
A reference implementation for \tcode{std::copyable_function}
was also tested for \tcode{std::constant_wrapper} integration in that repository.

\ref[#stateless] has been implemented at \ref[GitHub2].
This was done by forking the existing reference implementation of \ref[P0792R14].

\h2{Wording}

\macro[\black_comment]{\hl[sym-punc]{//}\serif{\i{\hl[sym-punc]{ \put}}}}

The following changes are relative to \ref[N5008]
with the changes in \ref[P2781R8] applied.

\comment{OPTION A =================================================================================}

\h3[id=wording-option-proposed]{
  Option A \N{EM DASH} Replacing \tcode{std::nontype} with \tcode{std::constant_wrapper}
}

\h4{[version.syn]}

In \eelis{version.syn}, update the feature-test macro:

\Bdiff{
\itemdecl{
#define __cpp_lib_copyable_function \del{202306L} \ins{20XXXXL} \black_comment{also in <functional>}
\ins{#define __cpp_lib_function 20XXXXL // also in <functional>}
#define __cpp_lib_function_ref \del{202306L} \ins{20XXXXL} \black_comment{also in <functional>}
#define __cpp_lib_move_only_function \del{202110L} \ins{20XXXXL} \black_comment{also in <functional>}
}
}

\h4{[utility.syn]}

In \eelis{utility.syn},
delete the declarations of \tcode{nontype_t} and \tcode{nontype}.

\Bdel{
\itemdecl{
// \serif{nontype argument tag}
template<auto V>
  struct nontype_t {
    explicit nontype_t() = default;
  };
template<auto V> constexpr nontype_t<V> nontype{};
}
}

\h4{[func.wrap.func] \tcode{std::function}}

Change the synopsis in \eelis{func.wrap.func.general} as follows:

\Bdiff{\itemdecl{
namespace std {
  template<class R, class... ArgTypes>
  class function<R(ArgTypes...)> {
  public:
    using result_type = R;

    \black_comment{[func.wrap.func.con], construct/copy/destroy}
    function() noexcept;
    function(nullptr_t) noexcept;
    function(const function&);
    function(function&&) noexcept;
    template<class F> function(F&&);
    \ins{template<auto f> function(constant_wrapper<f>) noexcept;
    template<auto f, class U> function(constant_wrapper<f>, U&&) noexcept;
    template<auto f, class T> function(constant_wrapper<f>, T*) noexcept;}

    function& operator=(const function&);
    function& operator=(function&&);
    function& operator=(nullptr_t) noexcept;
    template<class F> function& operator=(F&&);
    template<class F> function& operator=(reference_wrapper<F>) noexcept;

    ~function();

    \black_comment{[func.wrap.func.mod], function modifiers}
    void swap(function&) noexcept;

    \black_comment{[func.wrap.func.cap], function capacity}
    explicit operator bool() const noexcept;

    \black_comment{[func.wrap.func.inv], function invocation}
    R operator()(ArgTypes...) const;

    \black_comment{[func.wrap.func.targ], function target access}
    const type_info& target_type() const noexcept;
    template<class T>       T* target() noexcept;
    template<class T> const T* target() const noexcept;
  };

  \ins{// \serif{[func.wrap.func.deduct] deduction guides}}
  template<class R, class... ArgTypes>
    function(R(*)(ArgTypes...)) -> function<R(ArgTypes...)>;

  template<class F> function(F) -> function<\exposid{see below}>;
  \ins{template<auto f> function(constant_wrapper<f>) -> function<\exposid{see below}>;
  template<auto f, class T> function(constant_wrapper<f>, T&&) -> function<\exposid{see below}>;}
}
}}

Make the following changes; specific wording to be provided in the next revision:

\Btodo{
Provide specifications for new constructor overload set and for the deduction guides,
with behavior analogous to how \tcode{std::nontype} is currently used in \tcode{std::function_ref}.
}

\h4{[func.wrap.move] \tcode{std::move_only_function}}

Change the synopsis in \eelis{func.wrap.func.general} as follows:

\Bdiff{\itemdecl{
namespace std {
  template<class R, class... ArgTypes>
  class move_only_function<R(ArgTypes...) \exposid{cv} \exposid{ref} noexcept(\exposid{noex})> {
  public:
    using result_type = R;

    \black_comment{[func.wrap.move.ctor], constructors, assignment, and destructor}
    move_only_function() noexcept;
    move_only_function(nullptr_t) noexcept;
    move_only_function(move_only_function&&) noexcept;
    template<class F> move_only_function(F&&);
    template<class T, class... Args>
      explicit move_only_function(in_place_type_t<T>, Args&&...);
    template<class T, class U, class... Args>
      explicit move_only_function(in_place_type_t<T>, initializer_list<U>, Args&&...);
    \ins{template<auto f> move_only_function(constant_wrapper<f>) noexcept;
    template<auto f, class U> move_only_function(constant_wrapper<f>, U&&) noexcept;
    template<auto f, class T> move_only_function(constant_wrapper<f>, \exposid{cv} T*) noexcept;}

    move_only_function& operator=(move_only_function&&);
    move_only_function& operator=(nullptr_t) noexcept;
    template<class F> move_only_function& operator=(F&&);

    ~move_only_function();

    \black_comment{// [func.wrap.move.inv], invocation}
    explicit operator bool() const noexcept;
    R operator()(ArgTypes...) \exposid{cv} \exposid{ref} noexcept(\exposid{noex});

    \black_comment{// [func.wrap.move.util], utility}
    void swap(move_only_function&) noexcept;
    friend void swap(move_only_function&, move_only_function&) noexcept;
    friend bool operator==(const move_only_function&, nullptr_t) noexcept;

    \ins{// \serif{[func.wrap.move.deduct], deduction guides}
    template<auto f> function(constant_wrapper<f>) -> function<\exposid{see below}>;
    template<auto f, class T> function(constant_wrapper<f>, T&&) -> function<\exposid{see below}>;}

  private:
    template<class VT>
      static constexpr bool \exposid{is-callable-from} = \exposid{see below};       \black_comment{exposition only}
  };
}
}}

Make the following changes; specific wording to be provided in the next revision:

\Btodo{
Provide specifications for new constructor overload set and for the deduction guides,
with behavior analogous to how \tcode{std::nontype} is currently used in \tcode{std::function_ref}.
}

\h4{[func.wrap.copy] \tcode{std::copyable_function}}

Change \eelis{func.wrap.copy.class}, as follows:

\Bdiff{\itemdecl{
namespace std {
  template<class R, class... ArgTypes>
  class copyable_function<R(ArgTypes...) \exposid{cv} \exposid{ref} noexcept(\exposid{noex})> {
  public:
    using result_type = R;

    \black_comment{[func.wrap.copy.ctor], constructors, assignments, and destructors}
    copyable_function() noexcept;
    copyable_function(nullptr_t) noexcept;
    copyable_function(const copyable_function&);
    copyable_function(copyable_function&&) noexcept;
    template<class F> copyable_function(F&&);
    template<class T, class... Args>
      explicit copyable_function(in_place_type_t<T>, Args&&...);
    template<class T, class U, class... Args>
      explicit copyable_function(in_place_type_t<T>, initializer_list<U>, Args&&...);
    \ins{template<auto f> copyable_function(constant_wrapper<f>) noexcept;
    template<auto f, class U> copyable_function(constant_wrapper<f>, U&&) noexcept;
    template<auto f, class T> copyable_function(constant_wrapper<f>, \exposid{cv} T*) noexcept;}

    copyable_function& operator=(const copyable_function&);
    copyable_function& operator=(copyable_function&&);
    copyable_function& operator=(nullptr_t) noexcept;
    template<class F> copyable_function& operator=(F&&);

    ~copyable_function();

    \black_comment{[func.wrap.copy.inv], invocation}
    explicit operator bool() const noexcept;
    R operator()(ArgTypes...) cv ref noexcept(noex);

    \black_comment{[func.wrap.copy.util], utility}
    void swap(copyable_function&) noexcept;
    friend void swap(copyable_function&, copyable_function&) noexcept;
    friend bool operator==(const copyable_function&, nullptr_t) noexcept;

    \ins{// \serif{[func.wrap.copy.deduct], deduction guides}
    template<auto f> function(constant_wrapper<f>) -> function<\exposid{see below}>;
    template<auto f, class T> function(constant_wrapper<f>, T&&) -> function<\exposid{see below}>;}

  private:
    template<class VT>
      static constexpr bool \exposid{is-callable-from} = \exposid{see below};       \black_comment{exposition only}
  };
}
}}

Make the following changes; specific wording to be provided in the next revision:

\Btodo{
Provide specifications for new constructor overload set and for the deduction guides,
with behavior analogous to how \tcode{std::nontype} is currently used in \tcode{std::function_ref}.
}

\h4{[func.wrap.ref] \tcode{std::function_ref}}

Change \eelis{func.wrap.ref.class}, as follows:

\Bdiff{
\itemdecl{
namespace std {
  template<class R, class... ArgTypes>
  class function_ref<R(ArgTypes...) \exposid{cv} noexcept(\exposid{noex})> {
  public:
    \black_comment{[func.wrap.ref.ctor], constructors and assignment operators}
    template<class F> function_ref(F*) noexcept;
    template<class F> constexpr function_ref(F&&) noexcept;
    template<auto f>
    constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>) noexcept;
    template<auto f, class U>
      constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, U&&) noexcept;
    template<auto f, class T>
      constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, \exposid{cv} T*) noexcept;

    constexpr function_ref(const function_ref&) noexcept = default;
    constexpr function_ref& operator=(const function_ref&) noexcept = default;
    template<class T> function_ref& operator=(T) = delete;

    \black_comment{[func.wrap.ref.inv], invocation}
    R operator()(ArgTypes...) const noexcept(\exposid{noex});

  private:
    template<class... T>
      static constexpr bool \exposid{is-invocable-using} = \exposid{see below};     \black_comment{exposition only}

    R (*\exposid{thunk-ptr})(\exposid{BoundEntityType}, Args&&...) noexcept(\exposid{noex});  \black_comment{exposition only}
    \exposid{BoundEntityType} \exposid{bound-entity};                               \black_comment{exposition only}
  };

  \black_comment{[func.wrap.ref.deduct], deduction guides}
  template<class F>
    function_ref(F*) -> function_ref<F>;
  template<auto f>
    function_ref(\del{nontype_t} \ins{constant_wrapper}<f>) -> function_ref<\exposid{see below}>;
  template<auto f, class T>
    function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, T&&) -> function_ref<\exposid{see below}>;
}
}
}

Change \eelis{func.wrap.ref.ctor} as follows:

\Vset[pnum]{8}

\Bdiff{
\itemdecl{
template<auto f> constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>) noexcept;
}

\itemdescr{
\pnum
Let \tcode{F} be \tcode{\del{decltype(f)} \ins{constant_wrapper<f>::value_type}}.

\pnum
\constraints
\tcode{\exposid{is-invocable-using}<F>} is \tcode{true}.

\pnum
\mandates
If \tcode{is_pointer_v<F> || is_member_pointer_v<F>} is \tcode{true},
then \tcode{\del{f} \ins{constant_wrapper<f>::value} != nullptr} is \tcode{true}.

\pnum
\effects
Initializes
\tcode{\exposid{bound-entity}} with a pointer to an unspecified object or
null pointer value, and
\nobr{\tcode{\exposid{thunk-ptr}}} with the address of a function \tcode{\exposid{thunk}}
such that
\tcode{\exposid{thunk}(\exposid{bound-entity}, \exposid{call-args}...)}
is expression-equivalent\iref{defns.expression.equivalent} to
\tcode{invoke_r<R>(\del{f} \ins{constant_wrapper<f>::value}, \exposid{call-args}...)}.
}

\itemdecl{
template<auto f, class U>
  constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, U&& obj) noexcept;
}

\itemdescr{
\pnum
Let \tcode{T} be \tcode{remove_reference_t<U>} and
\tcode{F} be \tcode{\del{decltype(f)} \ins{constant_wrapper<f>::value_type}}.

\pnum
\constraints
\ul{
  \li{\tcode{is_rvalue_reference_v<U&&>} is \tcode{false}, and}
  \li{\tcode{\exposid{is-invocable-using}<F, \cv{} T&>} is \tcode{true}.}
}

\pnum
\mandates
If \tcode{is_pointer_v<F> || is_member_pointer_v<F> is \tcode{true},
then \tcode{\del{f} \ins{constant_wrapper<f>::value} != nullptr} is \tcode{true}.

\pnum
\effects
Initializes
\tcode{\exposid{bound-entity}} with \tcode{addressof(obj)}, and
\tcode{\exposid{thunk-ptr}} with the address of a function \tcode{\exposid{thunk}}
such that
\tcode{\exposid{thunk}(\exposid{bound-entity}, \exposid{call-args}...)}
is expression-equivalent\iref{defns.expression.equivalent} to
\tcode{invoke_r<R>(\del{f} \ins{constant_wrapper<f>::value}, static_cast<\exposid{cv} T&>(obj), \exposid{call-args}...)}.
}
}

\itemdecl{
template<auto f, class T>
  constexpr function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, \exposid{cv} T* obj) noexcept;
}

\itemdescr{
\pnum
Let \tcode{F} be \tcode{\del{decltype(f)} \ins{constant_wrapper<f>::value_type}}.

\pnum
\constraints
\tcode{\exposid{is-invocable-using}<F, \cv{} T*>} is \tcode{true}.

\pnum
\mandates
If \tcode{is_pointer_v<F> || is_member_pointer_v<F> is \tcode{true},
then \tcode{\del{f} \ins{constant_wrapper<f>::value} != nullptr} is \tcode{true}.

\pnum
\expects
If \tcode{is_member_pointer_v<F>} is \tcode{true},
\tcode{obj} is not a null pointer.

\pnum
\effects
Initializes
\tcode{\exposid{bound-entity}} with \tcode{obj}, and
\tcode{\exposid{thunk-ptr}} with the address of a function \tcode{\exposid{thunk}}
such that
\tcode{\exposid{thunk}(\exposid{bound-entity}, \exposid{call-args}...)}
is expression-equivalent\iref{defns.expression.equivalent} to
\tcode{invoke_r<R>(\del{f} \ins{constant_wrapper<f>::value}, obj, \exposid{call-args}...)}.
}
}
}

In \eelis{func.wrap.ref.deduct},
change the deduction guides as follows:

\Vset[pnum]{1}

\Bdiff{
\itemdecl{
template<auto f>
  function_ref(\del{nontype_t} \ins{constant_wrapper}<f>) -> function_ref<\seebelow>;
}

\itemdescr{
\pnum
Let \tcode{F} be \tcode{remove_pointer_t<\del{decltype(f)} \ins{constant_wrapper<f>::value_type}>}.

\pnum
\constraints
\tcode{is_function_v<F>} is \tcode{true}.

\pnum
\remarks
The deduced type is \tcode{function_ref<F>}.
}

\itemdecl{
template<auto f, class T>
  function_ref(\del{nontype_t} \ins{constant_wrapper}<f>, T&&) -> function_ref<\exposid{see below}>;
}

\itemdescr{
\pnum
Let \tcode{F} be \tcode{\del{decltype(f)} \ins{constant_wrapper<f>::value_type}}.

\pnum
\constraints
\ul{
\li{
\tcode{F} is of the form
\tcode{R(G::*)(A...) \cv{} &\sub{\serif{opt}} noexcept(E)} for a type \tcode{G}, or
}
\li{
\tcode{F} is of the form
\tcode{M G::*} for a type \tcode{G} and an object type \tcode{M},
in which case
let \tcode{R} be \tcode{invoke_result_t<F, T&>},
\tcode{A...} be an empty pack, and
\tcode{E} be \tcode{false}, or
}
\li{
\tcode{F} is of the form
\tcode{R(*)(G, A...) noexcept(E)} for a type \tcode{G}.
}
}

\pnum
\remarks
The deduced type is \tcode{function_ref<R(A...) noexcept(E)>}.
}
}

\comment{OPTION B =================================================================================}

\macro[\replacement_v]{constant_arg}
\macro[\replacement_t]{constant_arg_t}
\macro[\del_ins_nontype]{\del{nontype_t} \ins{\replacement_t}}
\macro[\etc]{[\N{HORIZONTAL ELLIPSIS}]}

\h3[id=wording-option-rename]{
  Option B \N{EM DASH} Renaming \tcode{std::nontype} to \tcode{std::\replacement_v}
}

In \eelis{version.syn}, update the feature-test macro:

\Bdiff{
\itemdecl{
#define __cpp_lib_function_ref \del{202306L} \ins{20XXXXL} \black_comment{also in <functional>}
}
}

In \eelis{utility.syn},
modify the header synopsis as follows:

\Bdiff{
\itemdecl{
\black_comment{\del{nontype} \ins{constant} argument tag}
template<auto V>
  struct \del_ins_nontype {
    explicit nontype_t() = default;
  };
\del{template<auto V> constexpr nontype_t<V> nontype{};}
\ins{template<auto V> constexpr \replacement_t<V> \replacement_v{};}
}
}

In \eelis{func.wrap.ref.class},
replace every occurrence of \tcode{nontype_t} with \tcode{\replacement_t}:

\Bdiff{
\itemdecl{
namespace std {
  template<class R, class... ArgTypes>
  class function_ref<R(ArgTypes...) \exposid{cv} noexcept(\exposid{noex})> {
  public:
    \black_comment{[func.wrap.ref.ctor], constructors and assignment operators}
    template<class F> function_ref(F*) noexcept;
    template<class F> constexpr function_ref(F&&) noexcept;
    template<auto f> constexpr function_ref(\del_ins_nontype<f>) noexcept;
    template<auto f, class U> constexpr function_ref(\del_ins_nontype<f>, U&&) noexcept;
    template<auto f, class T> constexpr function_ref(\del_ins_nontype<f>, \exposid{cv} T*) noexcept;

    constexpr function_ref(const function_ref&) noexcept = default;
    constexpr function_ref& operator=(const function_ref&) noexcept = default;
    template<class T> function_ref& operator=(T) = delete;

    \black_comment{[func.wrap.ref.inv], invocation}
    R operator()(ArgTypes...) const noexcept(\exposid{noex});

  private:
    template<class... T>
      static constexpr bool \exposid{is-invocable-using} = \exposid{see below};     \black_comment{exposition only}

    R (*\exposid{thunk-ptr})(\exposid{BoundEntityType}, Args&&...) noexcept(\exposid{noex});  \black_comment{exposition only}
    \exposid{BoundEntityType} \exposid{bound-entity};                               \black_comment{exposition only}
  };

  \black_comment{[func.wrap.ref.deduct], deduction guides}
  template<class F>
    function_ref(F*) -> function_ref<F>;
  template<auto f>
    function_ref(\del_ins_nontype<f>) -> function_ref<\exposid{see below}>;
  template<auto f, class T>
    function_ref(\del_ins_nontype<f>, T&&) -> function_ref<\exposid{see below}>;
}
}
}

In \eelis{func.wrap.ref.ctor},
replace every occurrence of \tcode{nontype_t} with \tcode{\replacement_t}:

\Bdiff{
\etc

\itemdecl{
template<auto f> constexpr function_ref(\del_ins_nontype<f>) noexcept;
}

\etc

\itemdecl{
template<auto f, class U>
  constexpr function_ref(\del_ins_nontype<f>, U&& obj) noexcept;
}

\etc

\itemdecl{
template<auto f, class T>
  constexpr function_ref(\del_ins_nontype<f>, \exposid{cv} T* obj) noexcept;
}

\etc

\itemdecl{
template<class T> function_ref& operator=(T) = delete;
}
\itemdescr{
21 \constraints
\ul{
  \li{\tcode{T} is not the same type as \tcode{function_ref},}
  \li{\tcode{is_pointer_v<T>} is \tcode{false}, and}  
  \li{\tcode{T} is not a specialization of \del_ins_nontype{}.}  
}
}
}

In \eelis{func.wrap.ref.deduct},
replace every occurrence of \tcode{nontype_t} with \tcode{\replacement_t}:

\Bdiff{

\etc

\itemdecl{
template<auto f>
  function_ref(\del_ins_nontype<f>) -> function_ref<\exposid{see below}>;
}

\etc

\itemdecl{
template<auto f, class T>
  function_ref(\del_ins_nontype<f>, T&&) -> function_ref<\exposid{see below}>;
}

\etc
}

\h2{References}

\bib[
  id = N5008,
  title = Working Draft\, Programming Languages — C++,
  date = 2025-03-15,
  author = Thomas Köppe,
  link = https://wg21.link/n5008,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/n5008.pdf
]
\bib[
  id = P0792R14,
  title = function_ref: a type-erased callable reference,
  date = 2022-02-08,
  author = Vittorio Romeo\, Zhihao Yuan\, Jarrad Waterloo,
  link = https://wg21.link/p0792r14,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p0792r14.html
]
\bib[
  id = P1045R1,
  title = constexpr Function Parameters,
  date = 2019-09-27,
  author = David Stone,
  link = https://wg21.link/p1045r1,
  long-link = https://open-std.org/JTC1/SC22/WG21/docs/papers/2019/p1045r1.html
]
\bib[
  id = P2472R3,
  title = make function_ref more functional,
  date = 2022-05-12,
  author = Jarrad J. Waterloo\, Zhihao Yuan,
  link = https://wg21.link/p2472r3,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2472r3.html
]
\bib[
  id = P2781R8,
  title = std::constant_wrapper,
  date = 2025-03-15,
  author = Hana Dusíková\, Matthias Kretz\, Zach Laine,
  link = https://wg21.link/p2781r8,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2781r8.html
]
\bib[
  id = P2841R1,
  title = Concept and variable-template template-parameters,
  date = 2023-10-14,
  author = Corentin Jabot,
  link = https://wg21.link/p2841r1,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2841r1.pdf
]
\bib[
  id = P3312R1,
  title = Overload Set Types,
  date = 2025-04-16,
  author = Bengt Gustafsson,
  link = https://wg21.link/p3312r1,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/p3312r1.pdf
]
\bib[
  id = GitHub1,
  title = Reference implementation of function wrappers with std::constant_wrapper,
  date = 2025-06-19,
  author = Bronek Kozicki,
  link = https://github.com/MFHava/P2548/compare/master...Bronek:P2548:bronek/with_constant_wrapper
]
\bib[
  id = GitHub2,
  title = Reference implementation of std::function_ref with std::stateless,
  date = 2025-06-14,
  author = Jan Schultke,
  link = https://github.com/Eisenwave/nontype_functional
]

\make-bib
