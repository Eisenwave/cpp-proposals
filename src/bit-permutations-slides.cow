\import{libwg21.cow}
\import{libslides.cow}

\macro[\footsep]{\N{EM SPACE}|\N{EM SPACE}}

\macro[\slidefoot]{
Jan Schultke
\footsep
Slides for P3104R3
\N{EM DASH}
Bit permutations
\footsep
Sofia 2025
\footsep
Slide \Vget[slidenum]
}

\style{
section>h1 {
    margin-top: calc(0.1 * var(--sw)) !important;
    font-size: 300%;
    text-align: center;
}

#docnum {
    font-family: var(--sans-serif-family);
    font-size: 80%;
    font-weight: normal;
}

li>ul {
    margin-top: 0;
}
}

\wg21-head[
    title = Slides for P3104R3\br{}Bit permutations
]{
\dl{
    \dt{Document number:} \dd{\docnum{P3730R0}}
    \dt{Date:}            \dd{\tt{2025-06-04}}
    \dt{Audience:}        \dd{LEWG}
    \dt{Project:}         \dd{ISO/IEC 14882 Programming Languages — C++, ISO/IEC JTC1/SC22/WG21}
    \dt{Reply-to:}        \dd{Jan Schultke <\mail{janschultke@gmail.com}>}
    \dt{Source:}          \dd{\ref[https://github.com/Eisenwave/cpp-proposals/blob/master/src/bit-permutations-slides.cow]}
}
\hr
\slide-controls
}

\slide{
\html-h1{Bit permutations\br\html-span[id=docnum]{P3104R3}}
}

\style{
.five-way-poll {
    table-layout: fixed;
}
.five-way-poll td {
    width: 20%;
    text-align: center;
}
.three-way-poll {
    table-layout: fixed;
}
.three-way-poll td {
    width: 2em;
    text-align: center;
}
}

\macro[\five-way-poll]{\table[class=five-way-poll]{
\tr{\th{SF}\th{F}\th{N}\th{A}\th{SA}}
\tr{\put}
}}

\macro[\three-way-poll]{\table[class=three-way-poll]{
\tr{\th{F}\th{N}\th{A}}
\tr{\put}
}}

\style{
.compact ul,
.compact li {
    margin: 0.25em 0;
}
}

\slide{
\html-h2[style=margin-bottom:0]{History}

\ul{
\li{
    \header{bit} functions added by \b{P0553R4}: \em{Bit operations} (C++20)
    \ul{
        \li{simple utilities like \tcode{has_single_bit}}
        \li{instruction wrappers like \tcode{rotl}, \tcode{popcount}, \tcode{countl_zero}, \N{HORIZONTAL ELLIPSIS}}
    }
}
\li{\header{stdbit.h} functions added by \b{N3022}: \i{Modern Bit Utilities} (C23)}
\li{
    P3104R0 continues work on \header{bit}
    \ul{
        \li{first seen in LEWGI at Tokyo 2024}
        \li{removal of some functions requested to increase consensus}
        \li{proposal minified twice since then; four function templates remain}
    }
}
}
}

\slide{
\slideh{Synopsis}

\cppblock{
template<\exposid{unsigned-integer} T>
  constexpr T bit_repeat(T x, int length) /* not noexcept */;

template<\exposid{unsigned-integer} T>
  constexpr T bit_reverse(T x) noexcept;

template<\exposid{unsigned-integer} T>
  constexpr T bit_compress(T x, T m) noexcept;

template<\exposid{unsigned-integer} T>
  constexpr T bit_expand(T x, T m) noexcept;
}
\placeholder{unsigned-integer} means "\constraints \tcode{T} is an unsigned integer type".
}

\macro[\ds]{\hl[number-delim]{'}}

\slide{
\slideh{\tcode{std::bit_repeat}}
\cppblock{
template<\exposid{unsigned-integer} T>
  constexpr T bit_repeat(T x, int length) /* not noexcept */;
}
\ul{
\li{repeats/broadcasts bit pattern with \tcode{length} in \tcode{x}}
\li{hardware support depends on \tcode{length} (> 0)}
}

\pre{
\code[cpp,nested=yes]{bit_repeat(0b\hl[number]{****}\ds\hl[number]{****}\ds\hl[number]{****}\ds{}0110u, 4)}
                               │
                ┌────┬────┬────┤
                │    │    │    │
\code[cpp,nested=yes]{        == 0b0110'0110'0110'0110u}
}
}

\slide{
\slideh{\tcode{std::bit_reverse}}
\cppblock{
template<\exposid{unsigned-integer} T>
  constexpr T bit_reverse(T x) noexcept;
}
\ul{
\li{reverses the order of bits in \tcode{x}}
\li{supported by \code[asm]{rbit} (ARM), \code[asm]{bswap} (x86), \N{HORIZONTAL ELLIPSIS}}
}

\pre{
\code[cpp,nested=yes]{bit_reverse(0b1000'1111'0000'1010u)}
               ┌───────────────┘│
              ┌─────────────────┘
              ││        …
\code[cpp,nested=yes]{         == 0b0101'0000'1111'0001u}
}
}

\slide{
\slideh{\tcode{std::bit_compress}}
\cppblock{
template<\exposid{unsigned-integer} T>
  constexpr T bit_compress(T x, T m) noexcept;
}
\ul{
\li{packs bits of \tcode{x} where the "mask" \tcode{m} has a one-bit, contiguously}
\li{supported by \code[asm]{bext} (ARM), \code[asm]{pext} (x86)}
}

\pre{
\code[cpp,nested=yes]{unsigned m = 0b0001'0010'0000'1000u;}
\code[cpp,nested=yes]{bit_compress(0b\hl[number]{***1}\ds\hl[number]{**1*}\ds\hl[number]{****}\ds{}\hl[number]{0***}u, m)}
                  │   │       └─┐
                  │   └────────┐│
                  └───────────┐││
\code[cpp,nested=yes]{         == 0b0000'0000'0000'0110u}
}
}

\slide{
\slideh{\tcode{std::bit_expand}}
\cppblock{
template<\exposid{unsigned-integer} T>
  constexpr T bit_expand(T x, T m) noexcept;
}
\ul{
\li{opposite of \tcode{std::bit_compress}}
\li{supported by \code[asm]{bdep} (ARM), \code[asm]{pdep} (x86)}
}

\pre{
\code[cpp,nested=yes]{unsigned m = 0b0001'0010'0000'1000u;}
\code[cpp,nested=yes]{bit_expand(  0b\hl[number]{****}\ds\hl[number]{****}\ds\hl[number]{****}\ds{}\hl[number]{*110}u, m)}
                  ┌────────────┘││
                  │   ┌─────────┘│
                  │   │       ┌──┘
\code[cpp,nested=yes]{          == 0b0001'0010'0000'0000u}
}
}

\slide{
\pre[style=margin-top:1em]{\literally{



              _____________________________
            < vote SF for bit permootations >
              -----------------------------
                     \   ^__^ 
                      \  (oo)\_______
                         (__)\       )\/\\
                             ||----w |
                             ||     ||



}}
}

