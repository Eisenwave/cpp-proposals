<pre class='metadata'>
Title: The Oxford variadic comma
Shortname: Pxxxx
Revision: 0
Status: NP
Date: 2024-02-17
Group: WG21
Audience: EWGI
Editor: Jan Schultke<janschultke@gmail.com>, janschultke@gmail.com
ED: https://eisenwave.github.io/cpp-proposals/to-signed-unsigned.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/to-signed-unsigned.bs)
Markup Shorthands: markdown on
Abstract: This proposal seeks to deprecate ellipsis parameters without a preceding comma.
</pre>


# Introduction # {#introduction}

[[P1219R2]] "Homogeneous variadic function parameters" proposed to make the
separating comma prior to an ellipsis parameter mandatory.
The proposal did not pass, but the latter part was strongly favored
by EWGI in Kona 2019.

<blockquote>
EWGI Poll: Make vararg declaration comma mandatory.
<table>
<thead>
<tr>
    <th>SF</th><th>F</th><th>N</th><th>A</th><th>SA</th>
</tr>
</thead>
<tbody>
<tr>
    <td>10</td><td>6</td><td>1</td><td>0</td><td>0</td>
</tr>
</tbody>
</table>
</blockquote>

This proposal continues where [[P1219R2]] has has left off.
Namely, I propose the following behavior:
<pre line-highlight=10-11>
// OK, function template parameter pack
template&lt;class T...&gt; void a(T...);

// OK, abbreviated function template parameter pack
void b(auto...);

// OK, ellipsis parameter, compatible with C
void c(int, ...); 

// Deprecated, ellipsis parameter, ill-formed in C
void d(int...);

// Ill-formed, but unambiguous
void d(int... args);
</pre>

## History and C compatibility ## {#history}

The active version of the C standard ISO/IEC9899:2018 permits functions
which accept a variable number of arguments.
Such functions must have a *parameter-type-list* containing at least one parameter,
and the ellipsis parameter must be comma-separated:
<blockquote>
*parameter-type-list*:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*parameter-list*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*parameter-list* `,` `...`
</blockquote>

Such ellipsis parameters were originally introduced in C++ along with function
prototypes, but without a separating comma.
Only `printf(char*...)` would have been well-formed in pre-standard C++,
unlike `printf(char*, ...)`.

For the purpose of C compatibility, C++ later allowed the separating comma,
resulting in the syntax (unchanged since C++98):

<blockquote>
*parameter-declaration-clause*:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*parameter-declaration-list*<sub>*opt*</sub> `...`<sub>*opt*</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*parameter-declaration-list* `,` `...`
</blockquote>

With the introduction of function template parameter packs in C++11, there arose a
syntactical ambiguity for `(T...)` between:
- a parameter pack of type `T...` and
- a single `T` followed by an ellipsis parameter.

At present, this ambiguity is always resolved in favor of function template
parameter packs, if that is well-formed.


# Motivation # {#motivation}

The syntax `(int...)` interferes with future standardization.
This has already impacted [[P1219R2]] and will impact any future proposal which
attempts to utilize this syntax.

Furthermore, variadic function templates are a much common and flexible way
of writing variadic functions in C++.
Many users associate `(int...)` with a pack, not with an ellipsis parameter.
Not parsing this syntax as a parameter pack is confusing.

Lastly, as explained above, only the syntax `(int, ...)` is compatible with C,
not `(int...)`.
The latter syntax is arguably pointless nowadays and only exists for the sake of
compatibility with pre-standard C++.

## Abominable packs ## {#abominable-packs}

There is also the *abominable pack* `(auto......)` or `(T......)`, which is a function
template parameter pack, followed by an ellipsis parameter.
Abominable packs are confusing because conceptually,
they consist of two separate constructs,
but the syntax strongly suggests that all `.` apply to `auto` or `T`.

Note: In other words, `(auto......)` is equivalent to `(auto..., ...)`.

Note: Some users believe that abominable packs are entirely useless because one
cannot provide any arguments to the ellipsis parameter.
However, this is false; arguments can be provided if the template arguments
corresponding to `T...` are explicitly provided, not deduced.

# Impact on the standard # {#impact-on-the-standard}

This proposal is a pure deprecation.

No new features are proposed or removed,
no semantics are altered,
and no existing code is impacted.

# Design considerations # {#design-considerations}

I do not propose to remove support for ellipsis parameters without a preceding
comma because there is no feature proposed which requires such removal.
A deprecation is sufficient at this time.

# Proposed wording # {#proposed-wording}

<style>
.indent {
    margin-left: 2em;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
    text-decoration: underlined;
}
del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The proposed wording is relative to [[!N4950]].

In subclause 9.3.4.6
<a href=http://eel.is/c++draft/dcl.fct#26>[dcl.fct]</a>,
modify paragraph 26 as follows:


<blockquote>
There is a syntactic ambiguity when an ellipsis occurs at the end of a
*parameter-declaration-clause* without a preceding comma.
In this case, the ellipsis is parsed as part of the
*abstract-declarator* if the type of the parameter either names a
template parameter pack that has not been expanded or contains `auto`;
otherwise, it is parsed as part of the *parameter-declaration-clause*.<sup>80</sup>
<ins>A disambiguation where the ellipsis is parsed as part of the
*parameter-declaration-clause* is deprecated.</ins>


<sup>80)</sup>
<small>One can explicitly disambiguate the parse either by introducing a comma
(so the ellipsis will be parsed as part of the *parameter-declaration-clause*)
or by introducing a name for the parameter
(so the ellipsis will be parsed as part of the *declarator-id*).</small>
</blockquote>

Note: The name of the subclause is based on [meta.trans.sign], sign modifications.


<pre class=biblio>
{
}
</pre>
