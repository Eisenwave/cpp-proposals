\import{libwg21.cow}

\macro[\zwnbsp]{\N{ZERO WIDTH NO BREAK SPACE}}
\macro[\cpp_standard]{C\zwnbsp+\zwnbsp+\N{NO-BREAK SPACE}standard}
\macro[\iso_10646]{ISO/IEC\N{NO-BREAK SPACE}10646}
\macro[\ref_p2071]{\ref[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2071r2.html#\put{0}]{[P2071R2] \put}}

\wg21-head[
    title = More named universal character escapes
]{
\dl{
    \dt{Document number:} \dd{\docnum{P3733R0}}
    \dt{Date:}            \dd{\tt{2025-06-28}}
    \dt{Audience:}        \dd{SG16}
    \dt{Project:}         \dd{ISO/IEC 14882 Programming Languages — C++, ISO/IEC JTC1/SC22/WG21}
    \dt{Reply-to:}        \dd{Jan Schultke <\mail{janschultke@gmail.com}>}
    \dt{GitHub Issue:}    \dd{\ref[https://wg21.link/P3733/github]}
    \dt{Source:}          \dd{\ref[https://github.com/Eisenwave/cpp-proposals/blob/master/src/more-unicode-escapes.cow]}
}
\hr
}

\Babstract{
C++23 permits the use of "correction", "control", and "alternate" aliases
for character names, but not "figment" or "abbreviation".
Following P2736R2,
this restriction is no longer necessary
because "figment" and "abbreviation" are normatively specified in the Unicode standard.
}

\h2[listed=no]{Contents}

\make-contents

\h2{Introduction}

\h3{History}

\macro[\esc]{\code[cpp]{\hl[escape]{\\\put}}}

\ref[P2071R2] introduced \gterm{named-universal-character} escapes into C++23,
which makes it possible to use "escape sequences" like \nobr{\esc{N{NO-BREAK SPACE}}}
within string or character literals.
These provide much-needed clarity as compared to \esc{u00A0}.
Some code points additionally or exclusively have aliases.
For example, \tt{DELETE} (\tt{control} alias)
and \tt{DEL} (\tt{abbreviation} alias) correspond to U+007F
within the Unicode standard.
There is no name for U+007F that is not categorized as an alias.

SG16 voted unanimously to support aliases within a \gterm{named-universal-character} at Prague 2020
when discussing R0:

\Bquote{
Match name aliases?
\five_way_poll[8,2,0,0,0]
}

EWG reaffirmed that decision at the same meeting:

\Bquote{
This [named universal character escapes] should further support aliases
\five_way_poll[18,2,1,0,0]
}

However,
\em{some} categories of aliases are disallowed in C++,
as explained in
\ref_p2071[sources]{§8.2 Name sources}:

\Bquote{
Unicode aliases provide another critical service.
As mentioned above, once assigned, names are immutable.
Corrections are only offered by providing an alias.
Aliases, accoring to the NamedAliases tables in the Unicode Character Database,
come in five varieties:
\ul{
\li{
\b{correction} Aliases for cases where an incorrect assigned name was published.
For example, U+FE18 has an assigned name of \tt{PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET}
and a correction alias of \tt{PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRACKET}
(note the typo correction).
}
\li{
\b{control} Aliases for various control characters.
For example, \tt{NULL} for U+0000.
}
\li{
\b{alternate}
Aliases for widely used alternate names.
For example, \tt{BYTE ORDER MARK} for U+FEFF.
}
\li{
\b{figment} Aliases for names that were documented, but never accepted in a standard.
For example, \tt{HIGH OCTET PRESET} for U+0081.
}
\li{
\b{abbreviation} Aliases for common abbreviations.
For example, \tt{NBSP} for U+00A0.
}
}
The intent is to use the aliases classified as \tt{correction}, \tt{control},
and \tt{alternate} as recognized names.
}

While the paper does not make it obvious why \tt{figment} and \tt{abbreviation}
are excluded,
the underlying reason is that the \cpp_standard referenced
\iso_10646 at the time,
where \tt{figment} aliases are not included whatsoever,
and where only a subset of the \tt{abbreviation} aliases in the Unicode standard
is included.
These issues were discussed at the 2021-11-03 SG16 meeting for R1;
see \ref[P2512R0].
R2 was then plenary-approved in 2022 with no support for
\tt{abbreviation} and \tt{figment} aliases.

Following \ref[P2736R2], the \cpp_standard references the Unicode standard
instead of \iso_10646,
and such a restriction is no longer motivated.

\h3{Inconsistency with other languages}

Many design choices of \ref[P2071R2] are ultimately motivated by
\ref_p2071[existing-practice]{§8.5 Existing practice}.
For example, the \esc{N{...}} syntax in C++ is identical to Python and Perl.
While C++ shares a syntax,
it does not permit the same categories of aliases:

\macro[\td_yes]{\td{\N{WHITE HEAVY CHECK MARK}}}
\macro[\td_no]{\td{\N{CROSS MARK}}}

\style{
#alias-table{
    min-width: 50%;
    margin-left: auto;
    margin-right: auto;
    table-layout: fixed;
}

#alias-table th:nth-child(3),
#alias-table th:nth-child(4),
#alias-table th:nth-child(5) {
    width: 10%;
}

#alias-table td:nth-child(3),
#alias-table td:nth-child(4),
#alias-table td:nth-child(5) {
    text-align: center;
}
}

\table[id=alias-table]{
\tr{
    \th{Alias category}\th{Example}\th{C++}\th{Python}\th{Perl}
}
\tr{
    \td{\tt{correction}}\td{\esc{N{PRESENTATION FORM FOR VERTICAL\br{}RIGHT WHITE LENTICULAR BRACKET}}}\td_yes\td_yes\td_yes
}
\tr{
    \td{\tt{control}}\td{\esc{N{NULL}}}\td_yes\td_yes\td_yes
}
\tr{
    \td{\tt{alternate}}\td{\esc{N{BYTE ORDER MARK}}}\td_yes\td_yes\td_yes
}
\tr{
    \td{\tt{figment}}\td{\esc{N{HIGH OCTET PRESET}}}\td_no\td_yes\td_yes
}
\tr{
    \td{\tt{abbreviation}}\td{\esc{N{NBSP}}}\td_no\td_yes\td_yes
}
}

Although this made historical sense,
it now feels like an arbitrary restriction.

\h2{Motivation}

\h3{Abbreviations}

While the usefulness of some abbreviations is debatable,
some of them significantly shorten commonly used code points.

\macro[\lesbian_family]{\N{WOMAN}\N{ZERO WIDTH JOINER}\N{WOMAN}\N{ZERO WIDTH JOINER}\N{GIRL}}

\Bex{
Multi-part emoji are constructed using U+200D ZERO WIDTH JOINER,
which is a rather long name:
\cppblock{
// Without abbreviations, we can form a "family: woman, woman, girl" \lesbian_family emoji as follows:
u8"\\N{WOMAN}\\N{ZERO WIDTH JOINER}\\N{WOMAN}\\N{ZERO WIDTH JOINER}\\N{GIRL}"
// With abbreviations:
u8"\\N{WOMAN}\\N{ZWJ}\\N{WOMAN}\\N{ZWJ}\\N{GIRL}"
}
}

\Bex{
If we log messages into a UTF-8 text file,
it is quite plausible that we would occasionally want to use
U+00A0 NO-BREAK SPACE or U+00AD SOFT HYPHEN code points:
\cppblock{\literally{
// Without abbreviations:
u8"INFO: Auto\N{SOFT HYPHEN}reconnect triggered due to network\N{NO-BREAK SPACE}timeout."
// With abbreviations:
u8"INFO: Auto\N{SHY}reconnect triggered due to network\N{NBSP}timeout."
}}
}

All that is to say that some abbreviations are well-motivated.
Furthermore, allowing abbreviations would establish consistency with Python and Perl.

\h3{Figments}

There are currently only three aliases classified as \tt{figment}:
\ul{
\li{U+0080 PADDING CHARACTER}
\li{U+0081 HIGH OCTET PRESET}
\li{U+0099 SINGLE GRAPHIC CHARACTER INTRODUCER}
}

While there also exist \tt{PAD}, \tt{HOP}, and \tt{SGC} abbreviations for these characters,
these are rather obscure and a user may prefer to use the \tt{figment} names
for additional clarity.
Therefore, they should also be supported by C++.
This would also establish consistency with Python and Perl.

\Bnote{
An alias being considered a \tt{figment} is largely inconsequential.
It just means that the name was not standardized in \iso_10646,
which is no longer referenced by the \cpp_standard anyway.
}

\h2{Proposed change}

The \tt{abbreviation} and \tt{figment} categories should also be permitted
within a \gterm{named-universal-character}.

\h2{Impact on implementations}

Permitting abbreviations and figments is essentially trivial.
\ref[UnicodeNameAliases] contains a list of all aliases,
with 354 abbreviations and 3 figments.
This is a drop in the ocean compared to the existing set of names.

Furthermore, the same guarantees of
uniqueness (will never conflict with other names)
and immutability (will never change)
are provided for \tt{figment} and \tt{abbreviation} as for
the \tt{control}, \tt{alternate}, and \tt{correction} categories.
This is generally the case for any names listed in \ref[UnicodeNameAliases].
See \ref[UnicodeAliasStability].
Therefore, upwards compatibility is not threatened.

\h2{Wording}

The following change is relative to \ref[N5008].

Change \eelis{lex.universal.char#3} as follows:

\Bdiff{
A \grammarterm{universal-character-name}
that is a \grammarterm{named-universal-character} designates the corresponding character
in the Unicode Standard (chapter 4.8 Name)
if the \grammarterm{n-char-sequence} is equal to its character name
or to one of its character name aliases\del{ of type “control”, “correction”, or “alternate”};
otherwise, the program is ill-formed.

\wg21-note{
These aliases are listed in the Unicode Character Database's \tt{NameAliases.txt}.
None of these names or aliases have leading or trailing spaces.
}
}

Change a feature-test macro in \eelis{tab:cpp.predefined.ft} as follows:

\macro[\etc]{[\N{HORIZONTAL ELLIPSIS}]}

\Bdiff{
\table{
  \tr{
    \th{Macro name}\th{Value}
  }
  \tr{\td{\etc}\td{\etc}}
  \tr{
    \td{\tcode{__cpp_named_character_escapes}}
    \td{\del{202207L} \ins{20XXXXL}}
  }
  \tr{\td{\etc}\td{\etc}}
}
}

\h2{References}

\bib[
  id = N5008,
  title = Working Draft\, Programming Languages — C++,
  date = 2025-03-15,
  author = Thomas Köppe,
  link = https://wg21.link/n5008,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/n5008.pdf
]
\bib[
  id = P2071R2,
  title = Named universal character escapes,
  date = 2022-03-25,
  author = Tom Honermann et al.,
  link = https://wg21.link/p2071r2,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2071r2.html
]
\bib[
  id = P2512R0,
  title = SG16: Unicode meeting summaries 2021-06-09 through 2021-12-15,
  date = 2021-12-23,
  author = Tom Honermann,
  link = https://wg21.link/p2512r0,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2512r0.html   
]
\bib[
  id = P2736R2,
  title = Referencing The Unicode Standard,
  date = 2023-02-09,
  author = Corentin Jabot,
  link = https://wg21.link/p2736r2,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2736r2.pdf
]
\bib[
  id = UnicodeNameAliases,
  title = Unicode® NameAliases.txt,
  link = https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt
]
\bib[
  id = UnicodeAliasStability,
  title = Unicode® Character Encoding Stability Policies \N{EM DASH} Formal Name Alias Stability,
  link = https://www.unicode.org/policies/stability_policy.html#Formal_Name_Alias
]

\make-bib
