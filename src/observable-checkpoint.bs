<pre class='metadata'>
Title: Rename <code>std::observable</code> to <code>std::observable_checkpoint</code>, and add a feature-test macro
Shortname: P3641
Revision: 0
Status: P
Date: 2025-02-28
Group: WG21
Audience: LEWG
Editor: Jan Schultke, janschultke@gmail.com
ED: https://eisenwave.github.io/cpp-proposals/observable-checkpoint.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/observable-checkpoint.bs)
Markup Shorthands: markdown on
Abstract: Rename `std::observable` to `std::observable_checkpoint`,
          and add a feature-test macro.
</pre>


# Introduction # {#introduction}

[[P1494R4]] "Partial program correctness"
introduced so-called *observable checkpoints* into the language,
as well as the function `std::observable` to establish such a checkpoint in the program.

Three issues with the name `std::observable` have been brought up ([[Reflector]], [[Reddit]]):

- It doesn't express intent very well, and a longer name could do that better.
- Some associate it with the "observer" design pattern, but it is unrelated.
- It is a short name, and using it for observable checkpoints now may impede future standardization.

## How did it end up being called `std::observable`? ## {#history}

The name originated in P1494R0.

LEWG last discussed the name during its review of P1494R2 ([[TeleconMinutes]]).
Alternative names (including `std::observable_checkpoint`) came up during that discussion,
but LEWG did not poll names.
The minutes of LEWG's review of P1494R3 do not record a discussion of names.

Note: This does not mean to imply that LEWG neglected its duties.
[[P1494R4]] itself does not discuss alternative names or request naming feedback.

EWG reviews did not poll names,
and their minutes do not record a discussion of names.
No further discussion of names occurred until the plenary vote at Hagenberg 2025.

Considering the situation, a name change should be polled before Sofia 2025.
This needs to be done via paper or national body comment
because [[P1494R4]] has already been approved in plenary.

# Design # {#design}

In discussions, `std::observable_checkpoint` has emerged as a favorite suggestion.
It is a very good name because it is self-explanatory:

> `std::observable_checkpoint()` establishes an observable checkpoint.

This expresses intent as elegantly as `std::unreachable`,
which documents that a point in the program is unreachable (or else ...).

Note: Various other options such as `std::checkpoint` have been discussed.
      `std::observable_checkpoint` is proposed because it's most likely to achieve consensus.

`std::observable` on its own makes little sense
because it's not trying to say that a point in the program
*is observable*, or that it *is observable behavior*.
Instead, `std::observable` *is a checkpoint* for prior observable behavior.
This intent should be expressed in the function name.

Furthermore it has been suggested in [[Discussion]]
to add a feature-test macro for the library function.
After all,
- there is a `__cpp_lib_unreachable` macro, and `std::unreachable` and `std::observable` are similar,
- [[P1494R4]] adds no feature-test macro for observable checkpoints (and it shouldn't), and
- it is useful to know whether the `std::observable_checkpoint` function exists.

Note: I was unable to find any discussion of a feature-test macro in meeting minutes,
      so lack thereof may be an oversight,
      rather than conscious design.

# Proposed wording # {#wording}

<style>
ins {
    background: rgba(136, 255, 93, 0.35);
    color: inherit;
}

del {
    background: rgba(255, 93, 93, 0.35);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The following changes are relative to [[!N5001]] with the changes in [[!P1494R4]] applied.

In subclause
<a href="https://eel.is/c++draft/cstdlib.syn">[cstdlib.syn]</a>,
modify the synopsis as follows:

<blockquote>
<pre>
[[noreturn]] void quick_exit(int status) noexcept;   // freestanding
void observable<ins>_checkpoint</ins>() noexcept;               // freestanding
</pre>
</blockquote>

In subclause
<a href="https://eel.is/c++draft/version.syn">[version.syn]</a>,
add a feature-test macro as follows:

<blockquote>
<pre>
<ins>#define __cpp_lib_observable_checkpoint 2025XXL // freestanding, also in &lt;cstdlib&gt;</ins>
</pre>
</blockquote>

In subclause
<a href="https://eel.is/c++draft/support.start.term">[support.start.term]</a>,
modify the declaration of `std::observable()` as follows:
<blockquote>
<pre>
void observable<ins>_checkpoint</ins>() noexcept;               // freestanding
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;*Effects*: Establishes an observable checkpoint ([intro.abstract]).
No other effects.
</blockquote>

# Acknowledgements # {#acknowledgements}

Thanks to Mark Hoemmen for researching [[#history]].

<pre class=biblio>
{
    "Reflector": {
        "title": "std::observable should have a better - ie worse - name",
        "href": "https://lists.isocpp.org/lib-ext/2025/02/29541.php",
        "authors": ["WG21"]
    },
    "Reddit": {
        "title": "WTF std::observable is?",
        "href": "https://www.reddit.com/r/cpp/comments/1is7aqy/wtf_stdobservable_is/",
        "authors": ["Redditors"]
    },
    "Discussion": {
        "title": "[std-discussion] Should there be a library feature-test macro for std::observable?",
        "href": "https://lists.isocpp.org/std-discussion/2025/02/2901.php"
    },
    "TeleconMinutes": {
        "title": "LEWG Telecon Minutes for P1494R2",
        "href": "https://wiki.edg.com/bin/view/Wg21telecons2022/P1494",
        "authors": ["LEWG"],
        "date": "1 February 2022"
    }
}
</pre>
