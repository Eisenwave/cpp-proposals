<pre class='metadata'>
Title: <code>break label;</code> and <code>continue label;</code>
Shortname: P3568
Revision: 1
Status: P
Date: 2025-03-13
Group: WG21
Audience: SG22, EWGI
Editor: Jan Schultke, janschultke@gmail.com
ED: https://eisenwave.github.io/cpp-proposals/break-continue-label.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/break-continue-label.bs)
Markup Shorthands: markdown on
Abstract: Introduce `break label` and `continue label` to `break` and `continue`
          out of nested loops and `switch`es as accepted into C2y,
          and relax label restrictions.
</pre>

# Revision history # {#history}

## Since R0 ## {#history-since-r0}

The paper was seen by EWGI and then by EWG at Hagenberg 2025,
with the following polls:

<blockquote>
<p><b>P3568R0</b>: EWG likes syntax <code>N3355: for (...) { }</code></p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>4</td><td>16</td><td>5</td><td>9</td><td>5</td>
</tr>
</table>
<p><b>P3568R0</b>: EWG likes syntax <code>for N3377 (...) { }</code></p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>4</td><td>16</td><td>5</td><td>9</td><td>5</td>
</tr>
</table>
<p><b>P3568R0</b>: If C has it, we are interested in this feature too.</p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>16</td><td>21</td><td>5</td><td>2</td><td>1</td>
</tr>
</table>
</blockquote>

Due to lack of consensus in EWG,
syntactical design choices were delegated to WG14.
WG14 saw [[N3377]] at Graz 2025 and voted as follows:

<blockquote>
<p><b>N3377</b>: Would WG14 like to see a paper changing loop name syntax at a future meeting?</p>
<table>
<tr>
    <td>F</td><td>N</td><td>A</td>
</tr>
<tr>
    <td>6</td><td>11</td><td>9</td>
</tr>
</table>
</blockquote>

The authors of [[N3377]] have expressed that they are no longer pursuing the paper;
therefore, R1 of this paper assumes that the debate on label syntax is entirely settled,
and C++ follows the [[N3355]] syntax.

Furthermore, the proposed wording as improved slightly,
and a `__cpp_break_label` feature-test macro is included.

# Introduction # {#introduction}

While C++ already has a broad selection of control flow constructs,
one construct commonly found in other languages is notably absent:
the ability to apply `break` or `continue` to a loop or `switch` when
this isn't the innermost enclosing statement.
This feature is popular, simple, and quite useful:

Specifically, we propose the following functionality:
```cpp
outer: for (auto x : xs) {
    for (auto y : ys) {
        if (/* ... */) {
            continue outer; // OK, continue applies to outer for loop
            break outer;    // OK, break applies to outer for loop  
        }
    }
}

switch_label: switch (/* ... */) {
    default: while (true) {
        if (/* ...*/) {
            break switch_label; // OK, break applies to switch, not to while loop
        }
    }
}

break outer;       // error: cannot break loop from the outside
goto outer;        // OK, used to be OK, and is unaffected by this proposal

switch_label:;     // OK, labels can be reused
goto switch_label; // error: jump target is ambiguous
```

The `break label` and `continue label` syntax is identical to that in [[N3355]]
and has been accepted into C2y (see working draft at [[N3435]]).
We bring that syntax into C++ and relax restrictions on labels to
make it more powerful,
and to address concerns in a follow-up proposal [[N3377]].

Note that `break` and `continue` with labels have been proposed in [[N3879]]
and rejected at Rapperswil 2014 ([[N4327]]):

<blockquote>
<p>Straw poll, proposal as a whole:</p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>1</td><td>1</td><td>1</td><td>13</td><td>10</td>
</tr>
</table>
<p>"break label;" + "continue label;"</p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>3</td><td>8</td><td>4</td><td>9</td><td>3</td>
</tr>
</table>
</blockquote>

I believe that rejecting `break label` was a grave mistake at a time.
Regardless, the WG21 sentiment towards the feature is now the opposite,
even if just for C compatibility (see [[#history-since-r0]]).

# Motivation # {#motivation}

`break label` and `continue label` are largely motivated by the ability to control nested loops.
This is a highly popular feature in other languages,
and C++ could use it too, since it has no good alternative.

To be fair, a conditional `return` in the loop sometimes bypasses the need to terminate it.
However, this is not always allowed; such practice is outlawed by
MISRA-C++:2008 Rule 6-6-5 "A function shall have a single point of exit at the end of the function"
([[MISRA-C++]]).
Even if it is permitted, there are many cases where an early `return` does not obsolete
`break`, and it generally does not obsolete `continue`.

Note: I have been told that more recent revisions of MISRA-C++ no longer include this rule.

## No good alternative ## {#no-good-alternatives}

Let's examine a motivating example which uses our new construct:

<div class="example">

```cpp
void f() {
    process_files: for (const File& text_file : files) {
        for (std::string_view line : text_file.lines()) {
            if (makes_me_angry(line)) {
                continue process_files;
            }
            consume(line);
        }
        std::println("Processed {}", text_file.path());
    }
    std::println("Processed all files");
}
```

`continue label` is very useful in this scenario,
and expresses our intent with unparalleled clarity.
We want to continue processing other files, so we `continue process_files`.

A plain `break` cannot be used here because it would result in executing the
following `std::println` statement, but this should only be done upon success. 
</div>

There are alternative ways to write this, but all of them have various issues.

### `goto` ### {#alternative-goto}

```cpp
for (const File& text_file : files) {
    for (std::string_view line : text_file.lines()) {
        if (makes_me_angry(line)) {
            goto done_with_file;
        }
        consume(line);
    }
    std::println("Processed {}", text_file.path());
    done_with_file:
}
std::println("Processed all files");
```

`goto` is similar in complexity and even readability here, however there are some issues:

- `goto` cannot cross (non-vacuous) initialization,
    which would be an issue if some variable was initialized prior to `std::println`.
    This can be addressed by surrounding the outer loop contents with another set of braces,
    but this solution isn't obvious and takes away from the elegance of `goto` here.
- `goto` cannot be used in constant expressions.
    For processing text files like in the example, this doesn't matter,
    but nested loops are desirable in a `constexpr` context as well.
- Many style guides ban or discourage the use of `goto`.
    See [[MISRA-C++]], [[CppCoreGuidelinesES76]], etc.
    This discouragement dates all the way back to 1968 (see [[GotoConsideredHarmful]]),
    and 66 years of teaching not to use `goto` won't be undone.
- Even in the cases where `goto` isn't discouraged,
    those cases are always special, like "only `goto` forwards",
    "only `goto` to break out of loops", etc..
    This issue has been debated for decades,
    and there is still no consensus on when, actually, `goto` is okay to use.
- `goto` is innately more difficult to use because to understand its purpose,
    the user has to know where the jump target is located.
    A `goto past_the_loop` behaves radically differently compared to a `goto before_the_loop`.
    Moving the jump target or the `goto` statement relative to each other can also completely
    change these semantics.
    By comparison, `break` and `continue` always jump forwards,
    past a surrounding loop, or to the end of a surrounding loop respectively.
    This makes them much easier to reason about, and much less error-prone.
- The "local readability" of `goto` relies heavily on high-quality naming for the label.
    A `goto end` could mean to the end of a loop, to after the loop, to the end of a function, etc.
    Since `break` and `continue` are much more limited,
    they do not require such good label naming.
    A `break loop` has bad name, but the user *generally* understands its purpose.

Note: Previous discussion on the [[isocpp-core]] reflector has addressed the idea
of just adding `constexpr goto`,
but doing so is alleged to be more complicated than more limited `constexpr` control flow
structures which can only "jump forwards", such as `break` and `continue`.

In conclusion, there are too many issues with `goto`, some of which may never be resolved.
[[std-proposals]] discussion prior to the publication of this proposal has shown once again
that `goto` is a controversial and divisive.

### Immediately invoked lambda expression (IILE) ### {#alternative-iile}

```cpp
for (const File& text_file : files) {
    [&] {
        for (std::string_view line : text_file.lines()) {
            if (makes_me_angry(line)) {
                return;
            }
            consume(line);
        }
        std::println("Processed {}", text_file.path());
    }();
}
std::println("Processed all files");
```

While this solution works in constant expressions,
we may be painting ourselves into a corner with this design.
We cannot also `break` the surrounding loop from within the IILE,
and we cannot return from the surrounding function.
If this is needed at some point, we will have to put substantial effort into refactoring.

Furthermore, this solution isn't exactly elegant:

- The level of indentation has unnecessarily increased through the extra scope.
- The call stack will be one level deeper during debugging.
    This may be relevant to debug build performance.
- The fact that the lambda is immediately invoked isn't obvious until reading up to `()`.
- The word `return` does not express the overall intent well, which is merely to
    continue the outer loop.
    This can be considered a teachability downside.

It is also possible to use an additional function instead of an IILE in this place.
However, this is arguably increasing the degree of complexity even more,
and it scatters the code across multiple functions without any substantial benefit.

### Mutable `bool` state ### {#alternative-bool-state}

```cpp
for (const File& text_file : files) {
    bool success = true;
    for (std::string_view line : text_file.lines()) {
        if (makes_me_angry(line)) {
            success = false;
            break;
        }
        consume(line);
    }
    if (success) {
        std::println("Processed {}", text_file.path());
    }
}
std::println("Processed all files");
```

This solution substantially increases complexity.
Instead of introducing extra scope and call stack depth,
we add more mutable state to our function.
The original intent of "go process the next file" is also lost.

Such a solution also needs additional state for *every* nested loop,
i.e. N `bool`s are needed to `continue` from N nested loops.

## Constant expressions ## {#constant-expressions}

Use of `constexpr` has become tremendously more common,
and `goto` may not be used in constant expressions.
Where `goto` is used to break out of nested loops, `break label` makes it easy to migrate code:

<div class="example">
Uses of `goto` to break out of nested loops can be replaced with `break label` as follows:

<pre><code>
<ins>constexpr</ins> void f() {
    <ins>outer: </ins>while (/* ... */) {
        while (/* ... */) {
            if (/* ... */) {
                <del>goto after_loop;</del>
                <ins>break outer;</ins>
            }
        }
    }
    <del>after_loop:;</del>
}
</code></pre>
</div>

Due to reasons mentioned above,
I do not believe that "`constexpr` `goto`" is a path forward that will find consensus.

## Argumentum ad populum ## {#argumentum-ad-populum}

Another reason to have `break label` and `continue label` is simply that it's a
popular construct, available in other languages.
When Java, JavaScript, Rust, or Kotlin developers pick up C++,
they may expect that C++ can `break` out of nested loops as well,
but will find themselves disappointed.

[[StackOverflow]] <i>"Can I use break to exit multiple nested `for` loops?"</i>
shows that there is interest in this feature (393K views at the time of writing).

A draft of the proposal was posted on [[Reddit]] and received overwhelmingly positive feedback
(70K views, 143 upvotes with, 94% upvote rate at the time of writing).

### Poll ### {#poll}

Another way to measure interest is to simply ask C++ users.
The following is a committee-style poll (source: [[TCCPP]]) from the Discord server
[Together C & C++](https://discord.gg/tccpp),
which is the largest server in terms of C++-focused message activity:

<blockquote>
Should C++ have "break label" and "continue label" statements
to apply break/continue to nested loops or switches?

<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>21</td><td>21</td><td>12</td><td>6</td><td>4</td>
</tr>
</table>
</blockquote>

Note: 64 users in total voted, and the poll was active for one week.

### How common is `break`/`continue` with labels? ### {#how-common-is-break-continue-label}

To further quantify the popularity, we can use GitHub code search for various
languages which already support this feature.
The following table counts only control statements with a label,
*not* plain `break;`, `continue;`, etc.
We also count statements like Perl's `last label`;
it is de-facto `break label`, just with a different spelling.

<table>
    <tr>
        <td>Language</td>
        <td>Syntax</td>
        <td>Labeled<br>`break`s</td>
        <td>Labeled<br>`continue`s</td>
        <td>&Sigma; `break` `continue`</td>
    </tr>
    <tr>
        <td>Java</td>
        <td>`label: for (...)`<br>`break label;`<br>`continue label;`</td>
        <td><a href="https://github.com/search?q=language%3AJava+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">424K files</a></td>
        <td><a href="https://github.com/search?q=language%3AJava+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">152K files</a></td>
        <td>576K files</td>
    </tr>
    <tr>
        <td>JavaScript</td>
        <td>`label: for (...)`<br>`break label;`<br>`continue label;`</td>
        <td><a href="https://github.com/search?q=language%3AJavaScript+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">53.8K files</a></td>
        <td><a href="https://github.com/search?q=language%3AJavaScript+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">68.7K files</a></td>
        <td>122.5K files</td>
    </tr>
    <tr>
        <td>Perl</td>
        <td>`label: for (...)`<br>`last label;`<br>`next label;`</td>
        <td><a href="https://github.com/search?q=language%3APerl+%2F%28%3F-i%29last+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">34.9K files</a></td>
        <td><a href="https://github.com/search?q=language%3APerl+%2F%28%3F-i%29next+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">31.7K files</a></td>
        <td>66.6K files</td>
    </tr>
    <tr>
        <td>Rust</td>
        <td>`label: for (...)`<br>`break 'label;`<br>`continue 'label;`</td>
        <td><a href="https://github.com/search?q=language%3ARust+%2F%28%3F-i%29break+%3F%27%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">30.6K files</a></td>
        <td><a href="https://github.com/search?q=language%3ARust+%2F%28%3F-i%29continue+%3F%27%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">29.1K files</a></td>
        <td>59.7K files</td>
    </tr>
    <tr>
        <td>TypeScript</td>
        <td>`label: for (...)`<br>`break label;`<br>`continue label;`</td>
        <td><a href="https://github.com/search?q=language%3ATypeScript+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">11.6K files</a></td>
        <td><a href="https://github.com/search?q=language%3ATypeScript+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">9K files</a></td>
        <td>20.6K files</td>
    </tr>
    <tr>
        <td>Swift</td>
        <td>`label: for ...`<br>`break label`<br>`continue label`</td>
        <td><a href="https://github.com/search?q=language%3ASwift+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%5Cn%2F&type=code">12.6K files</a></td>
        <td><a href="https://github.com/search?q=language%3ASwift+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%5Cn%2F&type=code">5.6K files</a></td>
        <td>18.2K files</td>
    </tr>
    <tr>
        <td>Kotlin</td>
        <td>`label@ for (...)`<br>`break@label`<br>`continue@label`</td>
        <td><a href="https://github.com/search?q=language%3AKotlin+%2F%28%3F-i%29break%40%5B_a-zA-Z0-9%5D%2B%2F&type=code">8.7K files</a></td>
        <td><a href="https://github.com/search?q=language%3AKotlin+%2F%28%3F-i%29continue%40%5B_a-zA-Z0-9%5D%2B%2F&type=code">7.6K files</a></td>
        <td>16.3K files</td>
    </tr>
    <tr>
        <td>D</td>
        <td>`label: for (...)`<br>`break label;`<br>`continue label;`</td>
        <td><a href="https://github.com/search?q=language%3AD+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">3.5K files</a></td>
        <td><a href="https://github.com/search?q=language%3AD+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">2.6K files</a></td>
        <td>6.1K files</td>
    </tr>
    <tr>
        <td>Go</td>
        <td>`label: for ...`<br>`break label;`<br>`continue label;`</td>
        <td><a href="https://github.com/search?q=language%3AGo+%2F%28%3F-i%29break+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">270 files</a></td>
        <td><a href="https://github.com/search?q=language%3AGo+%2F%28%3F-i%29continue+%5B_a-zA-Z0-9%5D%2B%3B%2F&type=code">252 files</a></td>
        <td>522</td>
    </tr>
    <tr>
        <td>Ada</td>
        <td>`label: for ...`<br>`exit label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>Dart</td>
        <td>`label: for ...`<br>`break label;`<br>`continue label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>Cpp2 (cppfront)</td>
        <td>`label: for ...`<br>`break label;`<br>`continue label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>C</td>
        <td>`label: for (...)`<br>`break label;`<br>`continue label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>Fortran</td>
        <td>`label: do ...`<br>`exit label`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
    <td>Groovy</td>
        <td>`label: for ...`<br>`break label;`<br>`continue label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>Odin</td>
        <td>`label: for ...`<br>`break label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>PL/I</td>
        <td>`label: do ...`<br>`exit label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>PostgreSQL</td>
        <td>`<<label>> for ...`<br>`exit label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>PowerShell</td>
        <td>`:label for ...`<br>`break outer`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
</table>


Based on this, we can reasonably estimate that there are at least one million files
in the world which use labeled `break`/`continue` (or an equivalent construct).

Note: This language list is not exhaustive and the search only includes open-source code bases on GitHub.
Some of the cells are N/A because the number isn't meaningful,
or simply because I haven't gotten around to doing the code search yet.


## C2y compatibility ## {#c2y-compatibility}

Last but not least, C++ should have `break label` and `continue label`
to increase the amount of code that has a direct equivalent in C.
Such compatibility is desirable for two reasons:

- `inline` functions or macros used in C/C++ interoperable headers could use the same syntax.
- C2y code is much easier to port to C++ (and vice-versa) if both languages support the same
    control flow constructs.

Furthermore, the adoption of [[N3355]] saves EWG a substantial amount of time
when it comes to debating the syntax; the C++ syntax should certainly be C-compatible.


# Design Considerations # {#design-considerations}

## Alternative `break` and `continue` forms ## {#alternative-break-continue-forms}

While the idea of applying `break` and `continue`
to some surrounding construct of choice is simple,
there are infinite ways to express this.
Various ideas have been proposed over the last months and years:

- `break 1`, `break 2`, ... (specify the amount of loops, not the targeted loop)
- `break while`, `break for while`, ... (target by keyword, not by label)
- `break break` (execute statement in the jumped-to scope)
- `for name (...)` (competing syntax in [[N3377]])

All of these have been discussed in great detail in the first revision of this paper, [[P3568R0]].
At this point, it would be a waste of time to discuss these in detail.

WG21 *overwhelmingly* agrees
(based on polls, reflector discussions, and personal conversations)
that the design should be compatible with C.
This is also reflected by a poll at Hagenberg 2025:

<blockquote>
<p><b>P3568R0</b>: If C has it, we are interested in this feature too.</p>
<table>
<tr>
    <td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td>
</tr>
<tr>
    <td>16</td><td>21</td><td>5</td><td>2</td><td>1</td>
</tr>
</table>
</blockquote>

Furthermore, WG14 has already accepted the `label: for` syntax of [[N3355]]
into C2y, and WG14 is unwilling to revisit this syntax,
as voted at Graz 2025:

<blockquote>
<p><b>N3377</b>: Would WG14 like to see a paper changing loop name syntax at a future meeting?</p>
<table>
<tr>
    <td>F</td><td>N</td><td>A</td>
</tr>
<tr>
    <td>6</td><td>11</td><td>9</td>
</tr>
</table>
</blockquote>

There is *only* one way forward that has a chance of finding consensus: **do what C does.**

## Changes to labels ## {#changes-to-labels}

While the proposed `for name (...)` syntax of [[N3377]]
was de-facto rejected at Graz,
the paper brings up legitimate issues with C2y `break label` after [[N3355]].

Notably, the restriction that a label can be used only once per function is not usually
present in other languages that support `break label`.
This restriction is especially bad for C and C++ because if `label:` was used in a macro,
that macro could only be expanded once per function:

```cpp
#define MACRO() outer: for (/* ... */) for (/* ... */) break outer;

void f() {
    MACRO() // OK so far
    MACRO() // error: duplicate label 'outer'
}
```

The author of [[N3355]] has expressed to me that he intends
to address these label issues for C2y.
In parallel, this proposal addresses such issues by relaxing label restrictions.
Presumably, C and C++ will converge on identical restrictions.

### Design philosophy ### {#design-philosophy}

The proposed design is extremely simple:

> 1. Drop *all* restrictions on labels.
> 2. Make `break label` and `continue label` "just work" anyway.
> 3. Disallow `goto label` for duplicate `label`.

Any existing `goto` code remains unaffected by this change.
These rules are simple and easy to remember.

While it may seem too lax to put no restrictions on labels at all,
there's no obvious problem with this.
Labels don't declare anything, and unless referenced by `break` and `goto`,
they are de-facto comments with zero influence on the labeled code.
If labels are quasi-comments, why should there be any restrictions on the labels themselves?

The consequences and details of these changes are described below.

### Allowing duplicate labels ### {#new-labels-duplicates}

I propose to permit duplicate labels,
which makes the following code valid:

```cpp
outer: while (true) {
    inner: while (true) {
        break outer; // breaks enclosing outer while loop
    }
}

outer: while (true) { // OK, reusing label is permitted
    inner: while (true) {
        break outer; // breaks enclosing outer while loop
    }
}

goto outer; // error: ambiguous jump target
```

Such use of duplicate labels (possibly with different syntax)
is permitted in numerous other languages,
such as Rust, Kotlin, Java, JavaScript, TypeScript, Dart, and more.
To be fair, languages that also support `goto` require unique labels per function,
but there's no technical reason why the uniqueness restriction
couldn't be placed on `goto` rather than the labels themselves.

As mentioned before, permitting such code is especially useful when these loops are not
hand-written, but expanded from a macro.
Even disregarding macros, there's nothing innately wrong about this code,
and it is convenient to reuse common names like `outer:` for controlling nested loops.

Note: Existing code using `goto` is unaffected
because existing code cannot have duplicate labels in the first place.


### Reusing labels in nested loops ### {#new-labels-nesting}

A more controversial case is the following:

```cpp
l: while (true) {
    l: while (true) {
        break l; // equivalent to break;
    }
}
```

`break l` generally applies to the innermost loop labeled `l:`,
so the inner loop is targeted here.
I believe that this code should be valid
because it keeps the label restrictions stupidly simple (there are none),
and because this feature may be useful to developers.

One may run into this case when nesting pairs of `outer:`/`inner:`
loops in each other "manually",
or when an `l:`-labeled loop in a macro is expanded into a surrounding loop that also uses `l:`.

Note: This code is not valid Java or JavaScript, but is valid Rust when using the label `'l`.

### Duplicate labels on the *same* statement ### {#new-labels-duplicates-on-same-statement}

A more extreme form of the scenario above is:

```cpp
l: l: l: l: f();
```

I also believe that this code should be valid because it's not harmful,
and may be useful in certain, rare situations (see below).
Once again, allowing it keeps the label restrictions stupidly simple.

```cpp
// common idiom on C: expand loops from macros
#define MY_LOOP_MACRO(...) outer: for (/* ... */)

outer: MY_LOOP_MACRO(/* ... */) {
    break outer;
}
```

If `MY_LOOP_MACRO` already uses an `outer:` label internally,
perhaps because it expands to two nested loops and uses `continue outer;` itself,
then the macro effectively expands to `outer: outer:`.
This forces the user to come up with a new label now,
for no apparent reason.

### `break label` for loops with more than one label ### {#new-labels-break-label-multiple}

Another case to consider is this:

```cpp
x: y: while (true) {
    break x; // OK in C2y
}
```

[[N3355]] makes wording changes to C so that the code above is valid.
For C2y compatibility and convenience, we also make this valid.
We don't change the C++ grammar to accomplish this,
but define the term *(to)&nbsp;label&nbsp;(a&nbsp;statement)*,
where `x` labels `while`.

# Impact on existing code # {#impact-on-existing-code}

No existing code becomes ill-formed or has its meaning altered.
This proposal merely permits code which was previously ill-formed,
and relaxes restrictions on the placement of labels.


# Implementation experience # {#implementation-experience}

An LLVM implementation is W.I.P.

A GCC implementation of [[N3355]] has also been committed at [[GCC]].

# Proposed wording # {#proposed-wording}

<style>
table, th, td {
    border-color: rgba(0, 0, 0, 0.5);
}

@media (prefers-color-scheme: dark) {
table, th, td {
    border-color: rgba(255, 255, 255, 0.5);
}
}

.indent {
    padding-left: 2em;
}

svg {
    background: none;
    vertical-align: middle;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
}
ins::not(.ins-block) {
    text-decoration: underlined;
}

.ins-block, .ins-block * {
    text-decoration: none !important;
}
.ins-block {
    background: rgba(136, 255, 93, 0.2) !important;
}

del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The wording is relative to [[!N5001]].

Update
<a href="https://eel.is/c++draft/stmt.label">[stmt.label]</a>
paragraph 1 as follows:

<blockquote>
A label can be added to a statement or used anywhere in a *compound-statement*.
<div class="indent">
    *label*:<br>
    <div class="indent">
        *attribute-specifier-seq*<sub>opt</sub> *identifier* `:`<br>
        *attribute-specifier-seq*<sub>opt</sub> `case` *constant-expression* `:`<br>
        *attribute-specifier-seq*<sub>opt</sub> `default` `:`
    </div>
    *labeled-statement*:<br>
    <div class="indent">
        *label* *statement*
    </div>
</div>
The optional *attribute-specifier-seq* appertains to the label.
<del>The only use of a label with an *identifier* is as the target of a `goto`.
No two labels in a function shall have the same identifier.</del>
A label can be used in a `goto` statement <ins>([stmt.goto])</ins> before its introduction.<ins><br><br>
[ *Note*: Multiple identical labels within the same function are permitted,
    but such duplicate labels cannot be used in a `goto` statement. &mdash; *end note* ]
</ins>
</blockquote>

In
<a href="https://eel.is/c++draft/stmt.label">[stmt.label]</a>
insert a new paragraph after paragraph 1:
<blockquote>
<ins>A label **L** of the form *attribute-specifier-seq*<sub>opt</sub> *identifier* `:`
*labels* the *statement* **S** of a *labeled-statement* **X** if
<ul>
    <li>**L** is the *label* of **X**, or</li>
    <li>**L** labels **X** (recursively).</li>
</ul></ins>
<div class="ins-block">
[ *Example*:
<pre>
a: b: while (0) { }            // both a: and b: label the loop
c: { d: switch (0) {           // unlike c:, d: labels the switch statement
    default: while (0) { }     // default: labels nothing
} }
</pre>&mdash; *end example* ]
</div>
</blockquote>

Note: This defines the term *(to) label*, which is used extensively below.
We also don't want `case` or `default` labels to label statements, since this would inadvertently
permit `break i` given `case i:`, considering how we word [stmt.break].

Update
<a href="https://eel.is/c++draft/stmt.label">[stmt.label]</a>
paragraph 3 as follows:
<blockquote>
A *control-flow-limited statement* is a statement **S** for which:
<ul>
    <li>
        a `case` or `default` label appearing within **S**
        shall be associated with a `switch` statement ([stmt.switch]) within **S**, and
    </li>
    <li>
        a label declared in **S** shall only be
        referred to by a statement <del>([stmt.goto])</del> in **S**.
    </li>
</ul>
</blockquote>

Note: While the restriction still primarily applies to `goto`
(preventing the user from e.g. jumping into an `if constexpr` statement),
if other statements can also refer to labels, it is misleading to say
"statement ([stmt.goto])" as if `goto` was the only relevant statement.

---

Update
<a href="https://eel.is/c++draft/stmt.jump.general">[stmt.jump.general]</a>
paragraph 1 as follows:

<blockquote>
Jump statements unconditionally transfer control.
<div class="indent">
    *jump-statement*:
        <div class="indent">
            <ins>`goto` *identifier* `;`</ins><br>
            `break` <ins>*identifier*<sub>opt</sub></ins> `;`<br>
            `continue` <ins>*identifier*<sub>opt</sub></ins> `;`<br>
            `return` *expr-or-braced-init-list*<sub>opt</sub> `;`<br>
            <del>`goto` *identifier* `;`</del><br>
        </div>
</div>
</blockquote>

Note: `goto` is being relocated to the top so that all the jump statements with an *identifier*
are grouped together.
Of these three, `goto` is being listed first because it models the concept of
"jumping somewhere" most literally; every following statement is more sophisticated or even
defined as equivalent to `goto` (in the case of `continue`).

---

Update
<a href="https://eel.is/c++draft/stmt.break">[stmt.break]</a>
paragraph 1 as follows:

<blockquote>
<ins>A *breakable statement* is
an *iteration-statement* ([stmt.iter]) or a `switch` statement ([stmt.switch]).</ins>
A `break` statement shall be enclosed by ([stmt.pre])
<ins>a breakable statement</ins>
<del>an *iteration-statement* ([stmt.iter]) or a `switch` statement ([stmt.switch])</del>.
<ins>If present, the *identifier* shall be part of a label **L** which labels ([stmt.label]) an enclosing breakable statement.</ins> 
The `break` statement causes termination of<ins>:</ins>
<del>the smallest such enclosing statement;</del>
<ul>
    <li>
        <ins>if an *identifier* is present, the smallest enclosing breakable statement labeled by **L**,</ins>
    </li>
    <li>
        <ins>otherwise, the smallest enclosing breakable statement.</ins>
    </li>
</ul>
<del>control</del><ins>Control</ins> passes to the statement following the terminated statement, if any.
<br><br>
<div class="ins-block">
[ *Example*:
<pre>
a: b: while (/* ... */) {
    a: a: c: for (/* ... */) {
        break;              // OK, terminates enclosing for loop
        break a;            // OK, same
        break b;            // OK, terminates enclosing while loop
        y: { break y; }     // error: break does not refer to a breakable statement
    }
    break c;                // error: break does not refer to an enclosing statement
}
break;                      // error: break is not enclosed by a breakable statement
</pre>&mdash; *end example* ]
</div>
</blockquote>

---

Update
<a href="https://eel.is/c++draft/stmt.cont">[stmt.cont]</a>
paragraph 1 as follows:

<blockquote>
A `continue` statement shall be enclosed by ([stmt.pre]) an *iteration-statement* ([stmt.iter]).
<ins>If present, the *identifier* shall be part of a label **L** which labels ([stmt.label]) an enclosing *iteration-statement*.</ins> 
The `continue` statement causes control to pass to the loop-continuation portion of<ins>:</ins>
<del>the smallest such enclosing statement, that is, to the end of the loop.</del>
<ul>
    <li>
        <ins>if an *identifier* is present, the smallest enclosing *iteration-statement* labeled by **L**,</ins>
    </li>
    <li>
        <ins>otherwise, the smallest enclosing *iteration-statement*.</ins>
    </li>
</ul>
More precisely, in each of the statements
<pre>
<ins>label: </ins>while (foo) {
  {
    // ...
  }
contin: ;
}

<ins>label: </ins>do {
  {
    // ...
  }
contin: ;
} while (foo);

<ins>label: </ins>for (;;) {
  {
    // ...
  }
contin: ;
}
</pre>
<del>a `continue` not contained in an an enclosed iteration statement is equivalent to `goto contin`.</del>
<ins>the following are equivalent to `goto contin`:
<ul>
    <li>A `continue` not contained in an an enclosed iteration statement.</li>
    <li>A `continue label` not contained in an enclosed iteration statement labeled `label:`.</li>
</ul>
</ins>
</blockquote>

Note: The clarification "that is, to the end of the loop"
was dropped entirely based on community feedback.
"the end of the loop" is not all that much clearer either, and the whole `goto` equivalence portion
should make it clear enough what the behavior is.

---

Update
<a href="https://eel.is/c++draft/stmt.goto">[stmt.goto]</a>
paragraph 1 as follows:

<blockquote>
The `goto` statement unconditionally transfers control to <del>the</del><ins>a</ins> statement
labeled <ins>([stmt.label])</ins> by <del>the identifier</del>
<ins>a *label* in the current function containing *identifier*</ins>.
<del>The identifier shall be a label located in the current function.</del>
<ins>There shall be exactly one such label.</ins>
</blockquote>

<div class=note>
<span class=marker>Note:</span>
This wording has always been defective and our proposal fixes this.
The term "to label" was never defined,
and the requirement that an identifier shall be a label is impossible to satisfy because
a label ends with a `:`, and an *identifier* in itself would never match the *label* rule.
</div>

---

Add a feature-test macro to 
<a href="https://eel.is/c++draft/tab:cpp.predefined.ft">[tab:cpp.predefined.ft]</a>
as follows:

<blockquote>
<table>
<tr>
    <th>Macro name</th><th>Value</th>
</tr>
<tr>
    <td><ins><code>__cpp_break_label</code></ins></td>
    <td><ins><code>20????L</code></ins></td>
</tr>
</table>
</blockquote>

# Acknowledgements # {#acknowledgements}

I thank Sebastian Wittmeier for providing a list of languages that support both
`goto` and `break`/`last` with the same label syntax.

I think Arthur O'Dwyer and Jens Maurer for providing wording feedback and improvement suggestions.

I especially thank Arthur O'Dwyer for helping me expand the list in
[[#how-common-is-break-continue-label]].
An even more complete list may be available at
[[ArthurBlog]].

I thank the
[Together C & C++](https://discord.gg/tccpp) community for responding to my poll; see [[TCCPP]].

<pre class=biblio>
{
    "ArthurBlog": {
        "authors": ["Arthur O' Dwyer"],
        "title": "Arthur O' Dwyer",
        "href": "https://quuxplusone.github.io/blog/2024/12/20/labeled-loops/"
    },
    "MISRA-C++": {
        "authors": ["MISRA Consortium Limited"],
        "title": "MISRA C++:2023",
        "href": "https://misra.org.uk/product/misra-cpp2023/"
    },
    "CppCoreGuidelinesES76": {
        "authors": ["CppCoreGuidelines contributors"],
        "title": "CppCoreGuidelines/ES.76: Avoid goto",
        "href": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-goto"
    },
    "GotoConsideredHarmful": {
        "authors": ["Edgar Dijkstra"],
        "title": "Go To Statement Considered Harmful",
        "href": "https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf",
        "date": "1968"
    },
    "isocpp-core": {
        "authors": ["CWG"],
        "title": "Discussion regarding continue vs. goto in constant expressions",
        "href": "https://lists.isocpp.org/core/2023/05/14228.php"
    },
    "Reddit": {
        "authors": ["Jan Schultke"],
        "title": "\"break label;\" and \"continue label;\" in C++",
        "href": "https://www.reddit.com/r/cpp/comments/1hwdskt/break_label_and_continue_label_in_c/"
    },
    "std-proposals": {
        "authors": ["Jan Schultke"],
        "title": "Bringing break/continue with label to C++",
        "href": "https://lists.isocpp.org/std-proposals/2024/12/11838.php"
    },
    "StackOverflow": {
        "authors": ["Faken"],
        "title": "Can I use break to exit multiple nested 'for' loops?",
        "href": "https://stackoverflow.com/q/1257744/5740428",
        "date": "10 Aug 2009"
    },
    "TCCPP": {
        "title": "Poll at Together C & C++ (discord.gg/tccpp)",
        "href": "https://discord.com/channels/331718482485837825/851121440425639956/1318965556128383029"
    },
    "GCC": {
        "authors": ["Jakub Jelinek"],
        "title": "c: Implement C2Y N3355 - Named Loops [PR117022]",
        "href": "https://gcc.gnu.org/git/gitweb.cgi?p=gcc.git;h=50f27896adb272b40ab03a56fd192e74789bef97"
    },
    "N3355": {
        "authors": ["Alex Celeste"],
        "title": "N3355: Named loops, v3",
        "href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3355.htm",
        "date": "2024-09-18"
    },
    "N3377": {
        "authors": ["Erich Keane"],
        "title": "N3377: Named Loops Should Name Their Loops: An Improved Syntax For N3355",
        "href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3377.pdf"
    },
    "N3435": {
        "authors": ["JeanHeyd Meneide", "Freek Wiedijk"],
        "title": "ISO/IEC 9899:202y (en) — n3435 working draft",
        "href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3435.pdf"
    }
}
</pre>
