<pre class='metadata'>
Title: <code>break label;</code> and <code>continue label;</code>
Shortname: Dxxxx
Revision: 0
Status: D
Date: 2024-12-18
Group: WG21
Audience: SG22, LEWGI, LEWG
Editor: Jan Schultke, janschultke@gmail.com
Editor: Sarah Qui√±ones
ED: https://eisenwave.github.io/cpp-proposals/break-continue-label.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/break-continue-label.bs)
Markup Shorthands: markdown on
Abstract: Introduce `break label` and `continue label` to `break` and `continue`
          out of nested loops and `switch`es, as accepted into C2y.
</pre>

# Revision history # {#history}

This is the first revision.

# Introduction # {#introduction}

While C++ already has a broad selection of control flow constructs,
one construct commonly found in other languages is notably absent:
the ability to apply `break` or `continue` to a loop or `switch` when
this isn't the innermost enclosing statement.
This feature is popular, simple to use, and quite useful:

Specifically, we propose the following syntax:
```cpp
outer: for (auto x : xs) {
    for (auto y : ys) {
        if (/* ... */) {
            continue outer; // OK, continue applies to outer for loop
            break outer;    // OK, break applies to outer for loop  
        }
    }
}

switch_label: switch (/* ... */) {
    default: while (true) {
        if (/* ...*/) {
            break switch_label; // OK, break applies to switch, not to while loop
        }
    }
}

break outer; // error: cannot break loop from the outside
goto outer; // OK, used to be OK, and is unaffected by this proposal
```

This syntax, identical to that in [[N3355]] has been accepted into C2y.
We do not propose any additional features beyond those.

As for C++, `break` and `continue` with labels have been proposed
and rejected previously in [[N3879]], 2014.
Ten years later, circumstances have changed and we should re-examine this feature.

## What has changed since 2014 ## {#changes-since-2014}

Use of `constexpr` has become tremendously more common,
and `goto` may not be used in constant expressions.
Where `goto` is used to break out of nested loops, `break label` makes it easy to migrate code:

<div class="example">
Uses of `goto` to break out of nested loops can be replaced with `break label` as follows:

<pre><code>
<ins>constexpr</ins> void f() {
    <ins>outer: </ins>while (/* ... */) {
        while (/* ... */) {
            if (/* ... */) {
                <del>goto after_loop;</del>
                <ins>break outer;</ins>
            }
        }
    }
    <del>after_loop:;</del>
}
</code></pre>
</div>

Besides this change in C++, `break label` and `continue label` have seen an increase
in popularity over the last ten years.
The feature has seen increased adoption in older languages such as C and JavaScript,
and newer languages have been popularized which support this construct,
such as Rust and Kotlin.

# Motivation # {#motivation}

`break label` and `continue label` are largely motivated by the ability to control nested loops.
This is a highly popular feature in other languages,
and C++ could use it too, since it has no good alternative.

## No good alternative ## {#no-good-alternatives}

Let's examine a motivating example which uses our new construct:

<div class="example">

```cpp
void f() {
    process_files: for (const File& text_file : files) {
        for (std::string_view line : text_file.lines()) {
            if (makes_me_angry(line)) {
                continue process_files;
            }
            consume(line);
        }
        std::println("Processed {}", text_file.path());
    }
    std::println("Processed all files");
}
```

`continue label` is very useful in this scenario,
and expresses our intent with unparalleled clarity.
We want to continue processing other files, so we `continue process_files`.

A plain `break` cannot be used here because it would result in executing the
following `std::println` statement, but this should only be done upon success. 
</div>

There are alternative ways to write this, but all of them have some form of issues:

### `goto` ### {#alternative-goto}

```cpp
for (const File& text_file : files) {
    for (std::string_view line : text_file.lines()) {
        if (makes_me_angry(line)) {
            goto done_with_file;
        }
        consume(line);
    }
    std::println("Processed {}", text_file.path());
    done_with_file:
}
std::println("Processed all files");
```

`goto` is similar in complexity and even readability here, however there are some issues:

- `goto` cannot cross (non-vacuous) initialization,
    which would be an issue if some variable was initialized prior to `std::println`.
    This can be addressed by surrounding the outer loop contents with another set of braces,
    but this solution isn't obvious and takes away from the elegance of `goto` here.
- `goto` cannot be used in constant expressions.
    For processing text files like in the example, this doesn't matter,
    but nested loops are desirable in a `constexpr` context as well.
- Many style guides ban or discourage the use of `goto`.
    See [[MISRA-C++]], [[CppCoreGuidelinesES76]], etc.
    This discouragement dates all the way back to 1968 (see [[GotoConsideredHarmful]]),
    and 66 years of teaching not to use `goto` won't be undone.
- `goto` is innately more difficult to use because to understand its purpose,
    the user has to know where the jump target is located.
    A `goto past_the_loop` behaves radically differently compared to a `goto before_the_loop`.
    Moving the jump target or the `goto` statement relative to each other can also completely
    change these semantics.
    By comparison, `break` and `continue` always jump forwards,
    past a surrounding loop, or to the end of a surrounding loop respectively,
    making them much easier to reason about, and much less error-prone.
- The "local readability" of `goto` relies heavily on high-quality naming for the label.
    A `goto end` could mean to the end of a loop, to after the loop, to the end of a function, etc.
    Since `break` and `continue` are much more limited,
    they do not require such good naming.
    A `break loop` has bad name, but the user *generally* understands its purpose.

Note: Previous discussion on the [[isocpp-core]] reflector has addressed the idea
of just adding `constexpr goto`,
but doing so is alleged to be more complicated than more limited `constexpr` control flow
structures which can only "jump forwards", such as `break` and `continue`.

### Immediately invoked lambda expression (IILE) ### {#alternative-iile}

```cpp
for (const File& text_file : files) {
    [&] {
        for (std::string_view line : text_file.lines()) {
            if (makes_me_angry(line)) {
                return;
            }
            consume(line);
        }
        std::println("Processed {}", text_file.path());
    }();
}
std::println("Processed all files");
```

While this solution works in constant expressions,
we may be painting ourselves into a corner with this design.
We cannot also `break` the surrounding loop from within the IILE,
and we cannot return from the surrounding function.
If this is needed at some point, we will have to put substantial effort into refactoring.

Furthermore, this solution isn't exactly elegant:

- The level of indentation has unnecessarily increased through the extra scope.
- The call stack will be one level deeper during debugging.
    This may be relevant to debug build performance.
- The fact that the lambda is immediately invoked isn't obvious until reading up to `()`.
- The word `return` does not express the overall intent well, which is merely to
    continue the outer loop.
    This can be considered a teachability downside.

It is also possible to use an additional function instead of an IILE in this place.
However, this is arguably increasing the degree of complexity even more,
and it scatters the code across multiple functions without any substantial benefit.

### Mutable `bool` state ### {#alternative-bool-state}

```cpp
for (const File& text_file : files) {
    bool success = true;
    for (std::string_view line : text_file.lines()) {
        if (makes_me_angry(line)) {
            success = false;
            break;
        }
        consume(line);
    }
    if (success) {
        std::println("Processed {}", text_file.path());
    }
}
std::println("Processed all files");
```

This solution substantially increase complexity.
Instead of introducing extra scope and call stack depth,
we add more mutable state to our function.
The original intent of "go process the next file" is also lost.

Such a solution also needs additional state for each nested loop,
i.e. two `bool`s are needed to `continue` from a loop "two levels up".

## Argumentum ad populum ## {#argumentum-ad-populum}

Another reason to have `break label` and `continue label` is simply that it's a
popular construct, available in other languages.
When Java, JavaScript, Rust, or Kotlin developers pick up C++,
they may expect that C++ can `break` out of nested loops as well,
but will find themselves disappointed.

[[StackOverflow]] <i>"Can I use break to exit multiple nested `for` loops?"</i>
shows that there is interest in this feature (393K views at the time of writing).

To further quantify the popularity, we can use GitHub code search for various
languages which already support this feature.

<table>
    <tr>
        <td>Language</td>
        <td>Syntax</td>
        <td>Labeled `break`s</td>
        <td>Labeled `continue`s</td>
        <td>&Sigma;</td>
    </tr>
    <tr>
        <td>C2y</td>
        <td>`label: for (...)`<br>`break label;`</td>
        <td>N/A</td>
        <td>N/A</td>
        <td>N/A</td>
    </tr>
    <tr>
        <td>Java</td>
        <td>`label: for (...)`<br>`break label;`</td>
        <td><a href="https://github.com/search?q=language%3AJava+%2F%28%3F-i%29break+%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">377K files</a></td>
        <td><a href="https://github.com/search?q=language%3AJava+%2F%28%3F-i%29continue+%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">122K files</a></td>
        <td>499K files</td>
    </tr>
    <tr>
        <td>Kotlin</td>
        <td>`label@ for (...)`<br>`break@label`</td>
        <td><a href="https://github.com/search?q=language%3AKotlin+%2F%28%3F-i%29break%40%5Ba-zA-Z0-9%5D%2B%2F&type=code">8.7K files</a></td>
        <td><a href="https://github.com/search?q=language%3AKotlin+%2F%28%3F-i%29continue%40%5Ba-zA-Z0-9%5D%2B%2F&type=code">7.5K files</a></td>
        <td>16.2K files</td>
    </tr>
    <tr>
        <td>JavaScript</td>
        <td>`label: for (...)`<br>`break label;`</td>
        <td><a href="https://github.com/search?q=language%3AJavaScript+%2F%28%3F-i%29break+%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">48.6K files</a></td>
        <td><a href="https://github.com/search?q=language%3AJavaScript+%2F%28%3F-i%29continue+%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">60.3K files</a></td>
        <td>108.9K files</td>
    </tr>
    <tr>
        <td>Rust</td>
        <td>`label: for (...)`<br>`break 'label;`</td>
        <td><a href="https://github.com/search?q=language%3ARust+%2F%28%3F-i%29break+%3F%27%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">25.1K files</a></td>
        <td><a href="https://github.com/search?q=language%3ARust+%2F%28%3F-i%29continue+%3F%27%5Ba-zA-Z0-9%5D%2B%3B%2F&type=code">26.6K files</a></td>
        <td>51.7K files</td>
    </tr>
    <tr>
        <td>Ruby</td>
        <td>`label: loop`<br>`break :label;`</td>
        <td><a href="https://github.com/search?q=language%3ARuby+%2F%28%3F-i%29break+%3F%3A%5Ba-zA-Z0-9%5D%2B%2F&type=code&p=4">920 files</a></td>
        <td><a href="https://github.com/search?q=language%3ARuby+%2F%28%3F-i%29continue+%3F%3A%5Ba-zA-Z0-9%5D%2B%2F&type=code">22 files</a></td>
        <td>944 files</td>
    </tr>
</table>

This language list is not exhaustive and the search only includes open-source code bases on GitHub.
Based on this, we can reasonably estimate that there are at least one million files
in the world which use this feature.

## C2y compatibility ## {#c2y-compatibility}

Last but not least, C++ should have `break label` and `continue label`
to increase the amount of code that has a direct equivalent in C.
This is not a particularly strong argument on its own,
considering that only `inline` functions or macros used in C/C++ interoperable headers
would benefit from this common syntax;
C and C++ often interoperate through functions with C linkage instead,
without definitions in headers.

However, the adoption of [[N3355]] saves EWG a substantial amount of time
when it comes to debating the syntax;
the C++ syntax should certainly be C-compatible.


# Possible implementation # {#possible-implementation}




# Design Considerations # {#design-considerations}

## Why not `break N;`? ## {#why-not-break-n}

A possible alternative to `break label;` would be a `break N;` syntax
(analogous for `continue`),
where `N` is an *integer-literal* or *constant-expression* which specifies
how many levels should be broken.
For example:

```cpp
while (/* ... */)
    while (/* ...*/)
        break 2; // breaks both loops
```

We don't propose this syntax for multiple reasons.
Firstly,
[[N3355]] points out readability concerns, concerns when using `break N;` in a macro,
and these are valid concerns in C++ as well.

Secondly, `break N` is more challenging to read because the developer has to investigate what scopes
surround the statement (where e.g. `if` doesn't count, but `switch` and `for` count),
and conclude from this where `break` applies.
By comparison, `break label;` obviously breaks out of the loop labeled `label:`.

Thirdly, this construct is a novel idea, similar to `break statement;` proposed in [[P2635R0]].
The author has seemingly abandoned that proposal.
In our experience, novel control flow ideas are unpopular and not worth pursuing.
An extreme negative reaction to novel control flow ideas was seen for
the `goto default;` and `goto case X;` statements proposed in [[N3879]].
By comparison, `break label;` is not a novel idea;
such code has likely been written a million times or more already
(based on numbers in [[#argumentum-ad-populum]]).

Yet another novel idea has been suggested at [[std-proposals-2]]:
```cpp
while (/* ... */){
 for (/* ... */) {
   if (/* ... */){
     break while; // break the while loop, not the for loop
     // break for while; // identical in functioning to the above version
   }
 }
}
```
This idea has not been received positively, and we strongly oppose it.
It is not as obvious what the targeted statement is, as with `break N;`,
and code can easily be broken by relocating the `break for while for;`
or whatever statement somewhere else.


## What about `break label;` for block statements etc.? ## {#break-block-statement} 

The following is *not* proposed:
```cpp
label: {
    break label;
}
```

Being able to apply `break` or `continue` to additional constructs in C++ would be a
controversial and novel idea.
We simply want to apply `break` and `continue` to the same things you can already apply it to,
but also state *which* construct they apply to, if need be.

## Should there be `break label;` and `continue label;` in constant expressions? ## {#constexpr-break-continue}

Yes, absolutely!
This is a major benefit over `goto`, and part of the motivation for this proposal.

An implementation is also quite feasible, and *basically* already exists in every compiler.
For constant evaluation, `break` already needs to be able to exit
out of arbitrarily deeply nested scopes:

```cpp
while (/* ... */) {
    if (/* ... */) {
        { { { { { break; } } } } }
    }
}
```

The only novelty offered by `break label;` is that one of those nested, exited scopes may also be
a `switch` or loop, which is not substantially challenging for implementers.


## What about syntax? ## {#syntax}

We strongly support the currently accepted syntax of [[N3355]].
This syntax is
- simple and intuitive,
- has been used in a variety of other languages, and
- is easy to implement, considering that labels already exist in that form.

It should be noted that there is a new competing proposal [[N3377]] for C2y, 
which instead proposes:

```cpp
for outer (/* ...*/) {
    while (/* ... */) break outer;
    while outer (/* ... */) {
        // OK, applies to the enclosing while loop
    }
}
```

In summary, the competing syntax has the sole technical benefit that
it doesn't require each `label:` to be unique within a function.
This allows the developer to expand function-style macros containing labeled loops
multiple times, and lets them repurpose simple names like `outer` and `inner` within the same function.

We instead address this by permitting the same `label:` multiple times within the same function,
see [[#changes-to-labels]].
In that case, `goto duplicate_label;` would be ill-formed due to ambiguity, but `break outer;`
would be permitted.
We believe this to be the right direction for both C and C++.

Furthermore, C++ already has precedent for additional keywords following a statement keyword,
in the form of `if constexpr`.
A user may expect `name` in `for name` to be some special keyword that alters the behavior of `for`.
On the contrary, `name: for` is well-established syntax which ISO C++ has supported since its
inception.
It would be a tremendous blunder not to use it.

## Changes to labels ## {#changes-to-labels}

As pointed out by [[N3377]] (see [[#syntax]]),
we adjust the semantics of labels to allow reusing them multiple times within the same function.

<div class="example">
The following code will be well-formed:

```cpp
outer: while (true) {
    inner: while (true) {
        break outer;
    }
}

outer: while (true) {
    inner: while (true) {
        break outer;
    }
}
```
</div>

Note: This code is well-formed Java and JavaScript.
When using the labels `'outer` and `'inner` instead, this code is also well-formed Rust.

In other words, we are doubling down on the [[N3355]] syntax and changing labels to behave
more like other mainstream languages.
C and C++ should not reinvent the wheel here by coming up with their own, novel way of labeling loops.

### New labels - `goto` issues ### {#new-labels-goto}

The label changes have some implications for `goto`:
```cpp
x: f();
x: g();
goto x; // error: jump is ambiguous
```

Labeling multiple statements with `x:` would now be permitted.
Even though this is essentially useless considering that `f()` and `g()` are not loops,
it makes the rules easier to teach, and easier to understand;
there are no special rules for loops.

`goto x;` is ill-formed because it is ambiguous which `x:` label it is meant to jump to.
This change doesn't break any existing code because existing code cannot have such ambiguities.


### New labels - what about nesting? ### {#new-labels-nesting}

Another case to consider is the following:

```cpp
l: while (true) {
    l: while (true) {
        break l;
    }
}
```

Note: This code is not valid Java or JavaScript, but is valid Rust when using the label `'l`.

We believe that this code should be well-formed.
Developers may run into this case when nesting pairs of `outer:`/`inner:`
loops in each other "manually",
or when a `l:` labeled loop in a macro is expanded into a surrounding loop that also uses `l:`.

Such cases are the motivation for [[N3377]], and should be addressed.
[[N3355]] does not currently permit such nesting,
and that fact will have to be resolved somehow,
either by significant syntax changes through [[N3377]],
or through relaxation of label rules.

### New labels - what about direct duplicates? ### {#new-labels-duplicates}

A more extreme form of the scenario above is:

```cpp
l: l: l: l: f();
```
We also believe that this code should be well-formed.
There doesn't appear to be any good use for putting the same label on a statement multiple times.
However, it's also not harmful.

Permitting this case has the benefit that *no code at all* can become ill-formed through
applying labels.
This rule is simple, teachable, and easy to implement.

### New labels - what about `break label` for loops with more than one label? {#new-labels-break-label-multiple}

Another case to consider is this:

```cpp
x: y: while (true) {
    break x;
}
```

Grammatically, `x: y: ...` is a *labeled-statement*,
where the *statement* is another *labeled-statement* `y: ...`,
with a *label* `y` and a *statement* `while ...`.
In other words, `x:` doesn't even apply directly to the loop.

[[N3355]] makes wording changes specifically to address this, and to make this well-formed.
So are we; this code should well-formed if only for the sake of C2y compatibility.

# Proposed wording # {#proposed-wording}

<style>
.indent {
    padding-left: 2em;
}

svg {
    background: none;
    vertical-align: middle;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
}
ins::not(.ins-block) {
    text-decoration: underlined;
}

.ins-block, .ins-block * {
    text-decoration: none !important;
}
.ins-block {
    background: rgba(136, 255, 93, 0.2) !important;
}

del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The wording is relative to [[!N5001]].

Update
<a href="https://eel.is/c++draft/stmt.jump.general">[stmt.jump.general]</a>
paragraph 1 as follows:

<blockquote>
Jump statements unconditionally transfer control.
<div class="indent">
    *jump-statement*:
        <div class="indent">
            `break` <ins>*identifier*<sub>opt</sub></ins> `;`<br>
            `continue` <ins>*identifier*<sub>opt</sub></ins> `;`<br>
            `return` *expr-or-braced-init-list*<sub>opt</sub> `;`<br>
            `goto` *identifier* `;`<br>
        </div>
</div>
</blockquote>

Update
<a href="https://eel.is/c++draft/stmt.break">[stmt.break]</a>
paragraph 1 as follows:

<blockquote>
<ins>A *breakable statement* is
an *iteration-statement* ([stmt.iter]) or a `switch` statement ([stmt.switch]).</ins>
A `break` statement shall be enclosed by ([stmt.pre])
<ins>a breakable statement</ins>
<del>an *iteration-statement* ([stmt.iter]) or a `switch` statement ([stmt.switch])</del>.
<ins>If specified, the *identifier* shall label ([stmt.label]) a breakable statement.</ins> 
The `break` statement causes termination
<ins>of the statement labeled by the *identifier* if specified, and otherwise</ins>
of the smallest <del>such</del> enclosing <ins>breakable</ins> statement;
control passes to the statement following the terminated statement, if any.
<br><br>
<div class="ins-block">
[Example:
<pre>
outer: while (/* ... */) {
    for (/* ... */) {
        break;         // break applies to enclosing for loop
        break outer;   // break applies to while loop labeled outer:
    }
}
</pre>&mdash; *end example*]
</div>
</blockquote>

Update
<a href="https://eel.is/c++draft/stmt.cont">[stmt.cont]</a>
paragraph 1 as follows:

<blockquote>
A `continue` statement shall be enclosed by ([stmt.pre]) an *iteration-statement* ([stmt.iter]).
<ins>If specified, the *identifier* shall label ([stmt.label]) an *iteration-statement*.</ins> 
The `continue` statement causes control to pass to the loop-continuation portion
<ins>of the statement labeled by the *identifier* if present, and otherwise</ins>
of the smallest <del>such</del> enclosing <ins>*iteration-statement*</ins> <del>statement</del>,
that is, to the end of the loop.
More precisely, in each of the statements

<pre>
<ins>label: </ins>while (foo) {
  {
    // ...
  }
contin: ;
}

<ins>label: </ins>do {
  {
    // ...
  }
contin: ;
} while (foo);

<ins>label: </ins>for (;;) {
  {
    // ...
  }
contin: ;
}
</pre>
a `continue` not contained in an
enclosed <del>iteration statement</del><ins>*iteration-statement* or a `continue label`</ins>
is equivalent to `goto contin`.
</blockquote>

Update
<a href="https://eel.is/c++draft/stmt.goto">[stmt.goto]</a>
paragraph 1 as follows:

<blockquote>
The `goto` statement unconditionally transfers control to the statement
labeled <ins>([stmt.label])</ins> by the <del>identifier</del><ins>*identifier*</ins>.
The <del>identifier</del><ins>*identifier*</ins> shall be a label located in the current function.
</blockquote>

<pre class=biblio>
{
    "MISRA-C++": {
        "authors": ["MISRA Consortium Limited"],
        "title": "MISRA C++:2023",
        "href": "https://misra.org.uk/product/misra-cpp2023/"
    },
    "CppCoreGuidelinesES76": {
        "authors": ["CppCoreGuidelines contributors"],
        "title": "CppCoreGuidelines/ES.76: Avoid goto",
        "href": "https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-goto"
    },
    "GotoConsideredHarmful": {
        "authors": ["Edgar Dijkstra"],
        "title": "Go To Statement Considered Harmful",
        "href": "https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf",
        "date": "1968"
    },
    "isocpp-core": {
        "authors": ["CWG"],
        "title": "Discussion regarding continue vs. goto in constant expressions",
        "href": "https://lists.isocpp.org/core/2023/05/14228.php"
    },
    "std-proposals-2": {
        "authors": ["Filip"],
        "title": "Improving break & continue",
        "href": "https://lists.isocpp.org/std-proposals/2024/11/11585.php"
    },
    "StackOverflow": {
        "authors": ["Faken"],
        "title": "Can I use break to exit multiple nested 'for' loops?",
        "href": "https://stackoverflow.com/q/1257744/5740428",
        "date": "10 Aug 2009"
    },
    "N3355": {
        "authors": ["Alex Celeste"],
        "title": "N3355: Named loops, v3",
        "href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3355.htm",
        "date": "2024-09-18"
    },
    "N3377": {
        "authors": ["Erich Keane"],
        "title": "N3377: Named Loops Should Name Their Loops: An Improved Syntax For N3355",
        "href": "https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3377.pdf"
    }
}
</pre>
