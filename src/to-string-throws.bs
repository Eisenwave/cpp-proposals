<pre class='metadata'>
Title: Restrict what `std::to_string` may throw
Shortname: Pxxxx
Revision: 0
Status: NP
Date: 2024-03-08
Group: WG21
Audience: LWG
Editor: Jan Schultke<janschultke@gmail.com>, janschultke@gmail.com
ED: https://eisenwave.github.io/cpp-proposals/to-string-throws.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/to-string-throws.bs)
Markup Shorthands: markdown on
Abstract: Add a *Throws* specification to `std::to_string`.
</pre>

# Introduction # {#introduction}

After merging [[P2587R3]],
<a href=http://eel.is/c++draft/string.conversions>[string.conversions]</a>
specifies `std::to_string` only through:
> *Returns*: `format("{}", val)`.

I believe this is needlessly under-specified because `std::to_string` can throw
anything, given that it has no *Throws* specification.
It would be better to reword it as an equivalence instead of merely specifying
the result.

It is not unclear what this implementation freedom can be used for,
and [[P2587R3]] doesn't justify this design choice.
A *Throws* specification would make it obvious that:
- Exceptions can be thrown here (`bad_alloc`).
- Despite the use of `format`, `format_error` cannot be thrown.

Note: The wording for `std::to_string` prior to [[P2587R3]] did not include a *Throws*
specification either.

# Implementation experience # {#implementation-experience}

libstdc++ is the only implementation which is reported to implement [[P2587R3]]
at the time of writing; see
<a href="https://github.com/gcc-mirror/gcc/blob/018ddc86b928514d7dfee024dcdeb204d5dcdd61/libstdc%2B%2B-v3/include/bits/basic_string.h#L4239">
`basic_string.h`
</a>
The implementation is based on `resize_and_overwrite` and `to_chars`.
It can only throw `std::bad_alloc` and would not benefit from the freedom to throw anything else.

# Design considerations # {#design-considerations}

A *Throws* specification is the most simple and direct way of conveying what can be thrown here,
which is only `std::bad_alloc`.

Another wording strategy would be to add
"*Effects*: Equivalent to: `format("{}", val)`",
which inherits the *Throws* specification of
<a href="https://eel.is/c++draft/format.functions#lib:vformat">[format.functions] `vformat`</a>,
which is specified through
<a href="https://eel.is/c++draft/format.err.report">[format.err.report] paragraph 1</a>.
This strategy is worse because `std::format_error` is a red herring (cannot be thrown here)
and because it takes too many indirections to get to `std::bad_alloc`.


# Proposed wording # {#proposed-wording}

<style>
.indent {
    margin-left: 2em;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
    text-decoration: underlined;
}
del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The proposed wording is relative to [[!N4950]] with the changes from [[P2587R3]] applied.


In subclause 23.4.5
<a href=http://eel.is/c++draft/string.conversions>[string.conversions]</a>,
update `to_string` as follows:
<blockquote>
<pre>
string to_string(int val);
string to_string(unsigned val);
string to_string(long val);
string to_string(unsigned long val);
string to_string(long long val);
string to_string(unsigned long long val);
string to_string(float val);
string to_string(double val);
string to_string(long double val);
</pre>
<p class=indent>
    <ins>*Throws*: `bad_alloc` upon allocation failure.</ins>
</p>
<p class=indent>
    *Returns*: `format("{}, val)`.
</p>
</blockquote>

In subclause 23.4.5
<a href=http://eel.is/c++draft/string.conversions>[string.conversions]</a>,
update `to_wstring` as follows:
<blockquote>
<pre>
wstring to_wstring(int val);
wstring to_wstring(unsigned val);
wstring to_wstring(long val);
wstring to_wstring(unsigned long val);
wstring to_wstring(long long val);
wstring to_wstring(unsigned long long val);
wstring to_wstring(float val);
wstring to_wstring(double val);
wstring to_wstring(long double val);
</pre>
<p class=indent>
    <ins>*Throws*: `bad_alloc` upon allocation failure.</ins>
</p>
<p class=indent>
    *Returns*: `format(L"{}, val)`.
</p>
</blockquote>


# Acknowledgements # {#acknowledgements}

The current wording strategy of this proposal has been suggested by Jonathan Wakely.


<pre class=biblio>
{
}
</pre>
