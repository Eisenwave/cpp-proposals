<pre class='metadata'>
Title: Bit permutations
Shortname: Pxxxx
Revision: 0
Status: NP
Date: 2024-01-19
Group: WG21
Audience: LEWGI, LEWG
Editor: Jan Schultke, janschultke@gmail.com
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/bit-permutations.bs)
Markup Shorthands: markdown on
Abstract: This proposal adds bit permutation functions to the bit manipulation library.
</pre>

# Introduction # {#intro}

I propose to expand the bit manipulation library with the following functions:

```cpp
// all constraints are exposition-only
template<unsigned_integral T>
constexpr T reverse_bits(T x) noexcept;
```
Reverses the bits of `x` so that the least significant bit becomes the most significant.

```cpp
template<unsigned_integral T>
constexpr T compress_bitsr(T x, T m) noexcept;
```
For each one-bit in `m`, the corresponding bit in `x` is taken and packed
contiguously into the result, starting with the least significant result bit.

```cpp
template<unsigned_integral T>
constexpr T compress_bitsl(T x, T m) noexcept;
```
For each one-bit in `m`, the corresponding bit in `x` is taken and packed
contiguously into the result, starting with the most significant result bit.

```cpp
template<unsigned_integral T>
constexpr T expand_bitsr(T x, T m) noexcept;
```
For each one-bit in `m`, a bit from `x`, starting with the least significant bit
is taken and shifted into the corresponding position of the `m` bit.

```cpp
template<unsigned_integral T>
constexpr T expand_bitsl(T x, T m) noexcept;
```
For each one-bit in `m`, a bit from `x`, starting with the most significant bit
is taken and shifted into the corresponding position of the `m` bit.

```cpp
template<unsigned_integral T>
constexpr T next_bit_permutation(T x) noexcept;
```
Returns the lowest number `y` in `(x, numeric_limits<T>::max()]` for which
`popcount(y) == popcount(x)`, or `0` if none exists.


# Motivation and scope # {#motivation-and-scope}

Bit-reversal, compression, and expansion are fundamental operations that meet multiple criteria
which make them suitable for standardization:

1. They are common and useful operations.
2. They can be used to implement numerous other operations.
3. At least on some architectures, they have direct hardware support.
4. They are non-trivial to implement efficiently in software.
5. For known masks, numerous optimization opportunities are available.

`next_bit_permutation` is useful, but relatively niche.
It can also be implemented efficiently in software in terms of `countl_zero`
or integer division.
I still believe that it's useful enough to be included in this proposal.


## Applications ## {#applications}

### Applications of `reverse_bits` ### {#applications-of-reverse-bits}

Bit-reversal is a common operation with uses in:

- **Cryptography**: scrambling bits
- **Networking**: as part of [cyclic redundancy check](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) computation
- **Graphics**: mirroring of images with one bit per pixel
- **Random number generation**: reversal can counteract low entropy of low-order bits
    such as in the case of [linear congruential generators](https://en.wikipedia.org/wiki/Linear_congruential_generator)
- **Digital signal processing**: for radix-2 [Cooley-Tukey FFT algorithms](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)
- **Code obfuscation**: security by obscurity

### Applications of `compress_bits` and `expand_bits` ### {#applications-of-compress-bits-and-expand-bits}

Compression and expansion are also common, with uses in:

- **Space-filling curves**: [Morton/Z-Order](https://en.wikipedia.org/wiki/Z-order_curve) and [Hilbert curves](https://en.wikipedia.org/wiki/Hilbert_curve)
- **Input/output**: especially for variable-length encodings, such as UTF-8 (example below)
- **Chess engines**: for [bitboards](https://en.wikipedia.org/wiki/Bitboard); see [[ChessProgramming1]]
- **Genomics**: according to [[ARM1]]

A GitHub code search for
`/(_pdep_u|_pext_u)(32|64)/ AND language:c++`
reveals ~1300 files which use the intrinsic wrappers for the x86 instructions.

### Applications of `next_bit_permutation` ### {#applications-of-next-bit-permutation}

`next_bit_permutation` is useful for iterating over all subsets with a fixed amount of elements
(see below for an example).
It has the notable advantage that it doesn't modify the original range.


## Motivating examples ## {#use-cases}

### Interleaving bits with `expand_bits` ### {#interleaving-bits}

A common use case for expansion is interleaving bits:
```cpp
// interleave the bits of two 8-bit integers x and y
expand_bitsr(x, 0b10101010) | expand_bitsr(y, 0b01010101)
```
This translates Cartesian coordinates to the index on a
[Z-order curve](https://en.wikipedia.org/wiki/Z-order_curve).
Space filling curves are a popular technique in compression.


### UTF-8 decoding with `compress_bitsr` ### {#input-output}

The operations can also be used in various I/O-related applications.

For example, `compress_bits` is particularly useful for variable-length
encodings, where data bits are interrupted by bits which signal continuation of the data.
UTF-8 is a typical example:
```cpp
uint_least32_t x = load32_little_endian(utf8_data_pointer);
switch (countl_one(uint8_t(x))) {
case 0: return compress_bitsr(x, 0b01111111);
case 1: /* error */;
case 2: return compress_bitsr(x, 0b00111111'00011111);
case 3: return compress_bitsr(x, 0b00111111'00111111'00001111);
case 4: return compress_bitsr(x, 0b00111111'00111111'00111111'00000111);
}
```

### Other operations based on `compress_bits` and `expand_bits` ### {#building-operations}

Many operations can be built on top of `compress_bits` and `expand_bits`.
However, direct hardware support is often needed for the proposed functions to efficiently
implement them.
Even without such support, they can be canonalized into a faster form.
The point is that `compress_bits` and `expand_bits` allow you to *express* these operations.

```cpp
// x & 0xf
expand_bitsr(x, 0xf)
compress_bitsr(x, 0xf)

// (x & 0xf) << 4
expand_bitsr(x, 0xf0)
// (x >> 4) & 0xf
compress_bitsr(x, 0xf0)

// Clear the least significant one-bit of x.
x ^= expand_bitsr(1, x)
// Clear the nth least significant one-bit of x.
x ^= expand_bitsr(1 << n, x)
// Clear the n least significant one-bits of x.
x ^= expand_bitsr((1 << n) - 1, x)

// (x >> n) & 1
compress_bitsr(x, 1 << n)
// Get the least significant bit of x.
compress_bitsr(x, x) & 1
// Get the nth least significant bit of x.
(compress_bitsr(x, x) >> n) & 1

// popcount(x)
countr_one(compress_bitsr(-1u, x))
countr_one(compress_bitsr(x, x))
```

### Iterating over subsets using `next_bit_permutation` ### {#iterating-with-next-bit-permutation}

```cpp
const char set[] {'a', 'b', 'c', 'd'};

for (unsigned bits = 0b11; bits < 16; bits = next_bit_permutation(bits)) {
    if (bits & 1) std::print("{}", set[0]);
    if (bits & 2) std::print("{}", set[1]);
    if (bits & 4) std::print("{}", set[2]);
    if (bits & 8) std::print("{}", set[3]);
    std::println("");
}
```
This code prints:
```cpp
ab
ac
bc
ad
bd
cd
```

## Hardware support ## {#hardware-support}

<table>
<tr>
    <th>Operation</th><th>x86_64</th><th>ARM</th><th>RISC-V</th>
</tr>
<tr>
    <td>`reverse_bits`</td>
    <td>(<a href="https://www.felixcloutier.com/x86/bswap">`BSWAP`</a>)</td>
    <td><a href="https://docsmirror.github.io/A64/2023-06/rbit_z_p_z.html">`RBIT`</a><sup>SVE2</sup></td>
    <td>(<a href="https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#164-vector-register-gather-instructions">`vrgather`</a><sup>V</sup>)</td>
</tr>
<tr>
    <td>`next_bit_permutation`</td>
    <td>(<a href="https://www.felixcloutier.com/x86/tzcnt">`TZCNT`</a><sup>BMI</sup>/<a href="https://www.felixcloutier.com/x86/bsf">`BSF`</a>)</td>
    <td>(<a href="https://docsmirror.github.io/A64/2023-06/ctz.html">`CTZ`</a>)</td>
    <td>(<a href="https://five-embeddev.com/riscv-bitmanip/draft/bitmanip.html#insns-ctz">`ctz`</a><sup>B</sup>)</td>
</tr>
<tr>
    <td>`compress_bitsr`</td>
    <td><a href="https://www.felixcloutier.com/x86/pext">`PEXT`</a><sup>BMI2</sup></td>
    <td><a href="https://dougallj.github.io/asil/doc/bext_z_zz_64.html">`BEXT`</a><sup>SVE2</sup></td>
    <td>(<a href="https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#165-vector-compress-instruction">`vcompress`</a><sup>V</sup>)</td>
</tr>
<tr>
    <td>`expand_bitsr`</td>
    <td><a href="https://www.felixcloutier.com/x86/pdep">`PDEP`</a><sup>BMI2</sup></td>
    <td><a href="https://dougallj.github.io/asil/doc/bdep_z_zz_64.html">`BDEP`</a><sup>SVE2</sup></td>
    <td>(<a href="https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1651-synthesizing-vdecompress">`viota`+`vrgather`</a><sup>V</sup>)</td>
</tr>
<tr>
    <td>`compress_bitsl`</td>
    <td>(<a href="https://www.felixcloutier.com/x86/pext">`PEXT`</a><sup>BMI2</sup>+<a href="https://www.felixcloutier.com/x86/popcnt">`POPCNT`</a><sup>ABM</sup>)</td>
    <td><a href="https://dougallj.github.io/asil/doc/bgrp_z_zz_64.html">`BGRP`</a><sup>SVE2</sup>, (<a href="https://dougallj.github.io/asil/doc/bext_z_zz_64.html">`BEXT`</a><sup>SVE2</sup>+<a href="https://dougallj.github.io/asil/doc/cnt_z_p_z_64.html">`CNT`</a><sup>SVE</sup>)</td>
    <td>(<a href="https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#165-vector-compress-instruction">`vcompress`</a><sup>V</sup>)</td>
</tr>
<tr>
    <td>`expand_bitsl`</td>
    <td>(<a href="https://www.felixcloutier.com/x86/pdep">`PDEP`</a><sup>BMI2</sup>+<a href="https://www.felixcloutier.com/x86/popcnt">`POPCNT`</a><sup>ABM</sup>)</td>
    <td>(<a href="https://dougallj.github.io/asil/doc/bdep_z_zz_64.html">`BDEP`</a><sup>SVE2</sup>+<a href="https://dougallj.github.io/asil/doc/cnt_z_p_z_64.html">`CNT`</a><sup>SVE</sup>)</td>
    <td>(<a href="https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1651-synthesizing-vdecompress">`viota`+`vrgather`</a><sup>V</sup>)</td>
</tr>
</table>

(Parenthesized) entries signal that the instruction does not directly implement the function,
but greatly assists in its implementation.

Note: The RISC-V instructions are all vector instructions.
      It is possible to turn each bit into a vector element, perform the wanted operation,
      and compress back into a bit-vector.

### Support for `reverse_bits` ### {#hardware-support-reverse}

This operation is directly implemented in ARM through
<a href="https://developer.arm.com/documentation/dui0473/m/arm-and-thumb-instructions/rbit">RBIT</a>.

Any architecture with support for `byteswap` (such as x86 with
<a href="https://www.felixcloutier.com/x86/bswap"><code>BSWAP</code></a>)
also supports bit-reversal in part.
[[Warren1]] presents an O(log n) algorithm which operates by swapping lower and upper
`N / 2`, ..., `16`, `8`, `4`, `2`, and `1` bits in parallel.
Byte-swapping implements these individual swaps up to 8 bits, requiring only three more
parallel swaps in software:
```cpp
// assuming a byte is an octet of bits, and assuming the width of x is a power of two
x = byteswap(x);
x = (x & 0x0F0F0F0F) <<  4 | (x & 0xF0F0F0F0) >>  4; // ... quartets of bits
x = (x & 0x33333333) <<  2 | (x & 0xCCCCCCCC) >>  2; // ... pairs of bits
x = (x & 0x55555555) <<  1 | (x & 0xAAAAAAAA) >>  1; // ... individual bits
```

It is worth noting that clang provides a cross-platform family of intrinsics.
<a href="https://clang.llvm.org/docs/LanguageExtensions.html#builtin-bitreverse">`__builtin_bitreverse`</a>
uses byte-swapping or bit-reversal instructions if possible.

Such an intrinsic has been requested from GCC users a number of times in [[GNU1]].

### Support for `next_bit_permutation` ### {#hardware-support-next-bit-permutation}

The next permutation can be efficiently obtained if the platform has a "count trailing zeros"
instruction.
Integer division can also be used as a fallback, although software computation of trailing zeros
may be faster than integer division.

Both options are shown in [[Anderson1]].

### Support for `compress_bits` and `expand_bits` ### {#hardware-support-compress-expand}

Starting with Haswell, Intel CPUs directly implement compression and expansion with
with PDEP and PEXT.
Intel x86_64 CPUs, as well AMD CPUs starting with Zen 3 implement PDEP and PEXT with 3 cycles
latency.
Zen 2 and older implement PDEP/PEXT in microcode, with 18 cycles latency.

ARM also supports these operations directly with BDEP, BEXT, and BGRP in the SVE2 instruction set.
[[Warren1]] mentions other architectures with direct support.

Overall, only recent instruction set extensions offer this functionality directly.
However, when the mask is a constant, many different strategies for hardware acceleration open up.
For example
- interleaving bits can be assisted (though not fully implemented) using ARM `ZIP1`/`ZIP2`
- other permutations can be assisted by ARM `TBL` and `TBX`

As [[Warren1]] explains, the cost of computing `compress_bits` and `expand_bits` in software is
dramatically lower for a constant mask.
For specific known masks (such as a mask with a single one-bit), the cost is extremely low.

All in all, there are multiple factors that strongly suggest a standard library implementation:

1. The strategy for computing `compress_bits` and `expand_bits` depends greatly on the architecture
    and on information about the mask, even if the exact mask isn't known.
     - `TZCNT`, `CLMUL` (see [[Zp7]]), and `POPCNT` are helpful.
2. ISO C++ does not offer a mechanism through which all of this information can be utilized.
    Namely, it is not possible to change strategy based on information that only becomes available
    during optimization passes.
    Compiler extensions such as `__builtin_constant_p` offer a workaround.
3. ISO C++ does not offer a mechanism through which function implementations can be chosen
    based on the surrounding context.
    In a situation where multiple `compress_bits` calls with the same mask `m` are performed,
    it is significantly faster to pre-compute information based on the mask once,
    and utilize it in subsequent calls.
    The same technique can be used to accelerate integer division for multiple divisons with the
    same divisor.

Bullets 2. and 3. suggest that `compress_bits` and `expand_bits` benefit from being
implemented directly in the compiler via intrinsic,
even if hardware does not directly implement these operations.



# Impact on existing code # {#impact-on-existing-code}

This proposal is purely a standard library expansion.
No existing code is affected.



# Design considerations # {#design}

The design choices in this paper are based on [[P0553R4]], wherever applicable.

## Why the names `compress_bitsx` and `expand_bitsx`? ## {#naming}

There are multiple synonymous sets of terminology:
1. `deposit` and `extract`
2. `compress` and `expand`
3. `gather` and `scatter`

I have decided against `deposit` and `extract` because of its ambiguity:

Taking the input `0b10101` and densely packing it to `0b111` could be described as:
> Extract each second bit from `0b10101` and densely deposit it into the result.

Similarly, taking the input `0b111` and expanding it into `0b10101` could be described as:
> Extract each bit from `0b111` and sparsely deposit it in the result.

Both operations can be described with `extract` and `deposit` terminology,
making it virtually useless for keeping the operations apart.
`gather` and `scatter` are simply the least common way to describe these operations, which makes
`compress` and `expand` the best candidates.

The use of `compress` and `expand` is consistent with the mask-based permutations for `std::simd`
proposed in [[P2664R6]].

The abbreviations `l` and `r` for left/right are consistent with the design choices in [[P0553R4]].

## Further generalization ## {#further-generalization}

### No generalized `compress_bits` and `expand_bits` ### {#generalized-compress-expand}

[[N3864]] originally suggested much more general versions of compression and expansion,
which support:

1. performing the operation not just on the whole operand, but on "words" of it, in parallel
2. performing the operation not just on bits, but on arbitrarily sized groups of bits

**I don't propose this generality** for the following reasons:
1. The utility functions in `<bit>` are not meant to provide a full bitwise manipulation library,
    but fundamental operations, especially those that can be accelerated
    in hardware while still having reasonable software fallbacks.
2. These more general form can be built on top of the proposed hardware-oriented versions.
    This can be done with relative ease and with little to no overhead.
3. The generality falsely suggests hardware support for all forms, despite the function only being
    accelerated for specific inputs.
    This makes the performance characteristics unpredictable.
4. The proposed functions have wide contracts and can be `noexcept` (Lakos rule).
    Adding additional parameters would likely require a narrow contract.
5. Generality adds complexity to the standardization process, to implementation,
    and from the perspective of language users.
    It is unclear whether this added complexity is worth it in this case.

### No generalized `reverse_bits` ### {#generalized-reverse-bits}

Bit reversal can also be generalized to work with any group size:
```cpp
template <typename T>
T reverse_bits(T x, int group_size = 1) noexcept(false);
```
With this generalization, `byteswap(x)` on conventional platforms
is equivalent to `reverse_bits(x, 8)`.

However, this general version is much less used, not as consistently supported in
hardware, and has a narrow contract.
`group_size` must be a nonzero factor of `x` for this operation to be meaningful.

Therefore, a generalized bit-reversal is not proposed in this paper.


## Why does the signature require two same `T`s? ## {#unusual-signature}


Initially, I went through a number of different signatures.

```cpp
template<unsigned_integral T, unsigned_integral X>
constexpr T compress_bitsr(X x, T m) noexcept;
```
This signature is quite clever because the result never has more bits than the mask `m`.
However, it is surprising that the mask plays such a significant role here.

Furthermore, I've realized that while the result never has more bits than `m`,
`compress_bitsl` must still deposit bits starting with the most significant bits of the result.
This suggests the following:
```cpp
template<unsigned_integral T, unsigned_integral X>
constexpr common_type_t<T, X> compress_bitsr(X x, T m) noexcept;
```
However, it is not trivial to juggle bits between the left and right versions of
`compress_bits` and `expand_bits`.
The behavior is also not intuitive when a zero-extension occurs.
For wider `x`, the mask is always zero-extended to the left, which makes the left and right
versions slightly asymmetrical.

Since this proposal includes low-level bit operations, it is reasonable and safe to require
the user to be explicit.
A call to `compress_bits` or `expand_bits` with two different types is likely a design flaw or bug.
Therefore, I have settled on the very simple signature:
```cpp
template<unsigned_integral T>
constexpr T compress_bitsr(T x, T m) noexcept;
```



# Possible implementation # {#possible-implementation}

## Reference implementation ## {#reference-implementation}

All proposed functions have been implemented in [[Schultke1]].
This reference implementation is compatible with all three major compilers,
and leverages hardware support from ARM and x86_64 where possible.


## Other implementations ## {#contemporary-implementations}

[[Warren1]] presents algorithms which are the basis for [[Schultke1]].
- An O(log n) `reverse_bits`
- An O(log<sup>2</sup> n) `compress_bits` and `expand_bits`
    - can be O(log n) with hardware support for
         carry-less multiplication aka. GF(2) polynomial multiplication

[[Zp7]] offers fast software implementations for PEXT and PDEP, optimized for x86_64.

[[StackOverflow1]] contains discussion of various possible software implementations
of `compress_bitsr` and `expand_bitsr`.


## Naive implementation ## {#naive-implementation}

The following implementations with linear time complexity are merely meant to show that an
implementation is feasible.
They demonstrate how a naive implementation with no hardware support may look.

### `reverse_bits` ### {#naive-reverse-bits}

```cpp
template<unsigned_integral T>
constexpr T reverse_bits(T x) noexcept
{
    T result = 0;
    for (int i = 0; i < numeric_limits<T>::digits; ++i) {
        result <<= 1;
        result |= x & 1;
        x >>= 1;
    }
    return result;
}
```

### `next_bit_permutation` ### {#naive-next-bit-permutation}

```cpp
template <unsigned_integral T>
constexpr T next_bit_permutation(T x) noexcept
{
    const int count = popcount(x);
    while (x != 0 && popcount(++x) != count) {}
    return x;
}
```

### `compress_bits` ### {#naive-compress-bits}

```cpp
template<unsigned_integral T>
constexpr T compress_bitsr(T x, T m) noexcept
{
    T result = 0;
    for (int i = 0, j = 0; i != numeric_limits<T>::digits; ++i) {
        bool mask_bit = (m >> i) & 1;
        result |= (mask_bit & (x >> i)) << j;
        j += mask_bit;
    }
    return result;
}

template<unsigned_integral T>
constexpr T compress_bitsl(T x, T m) noexcept
{
    return reverse_bits(compress_bitsr(reverse_bits(x)), reverse_bits(m)));
}
```

### `expand_bits` ### {#naive-expand-bits}

```cpp
template<unsigned_integral T>
constexpr T expand_bitsr(T x, T m) noexcept
{
    T result = 0;
    for (int i = 0, j = 0; i != numeric_limits<T>::digits; ++i) {
        bool mask_bit = (m >> i) & 1;
        result |= (mask_bit & (x >> j)) << i;
        j += mask_bit;
    }
    return result;
}

template<unsigned_integral T>
constexpr T expand_bitsl(T x, T m) noexcept
{
    return reverse_bits(expand_bitsr(reverse_bits(x)), reverse_bits(m)));
}
```


# Proposed wording # {#proposed-wording}

<style>
.indent {
    margin-left: 2em;
}

svg {
    background: none;
    vertical-align: middle;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
    text-decoration: none;
}
del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The proposed changes are relative to the working draft of the standard as of [[!N4917]].


## Feature-testing ## {#proposed-feature-testing}

In subclause 17.3.2 [version.syn] paragraph 2, update the synopsis as follows:
<blockquote>
<pre><code>
#define __cpp_lib_bitops                    <del>201907L</del><ins>202401L</ins> // freestanding, also in &lt;bit&gt;
</code></pre>
</blockquote>


## Header synopsis ## {#proposed-header-synopsis}

In subclause 22.15.2 [bit.syn], update the synopsis as follows:

<blockquote>
<pre><code><ins>
+ // 22.15.X, permutations
+ template&lt;class T&gt;
+   constexpr T reverse_bits(T x) noexcept;
+ template&lt;class T&gt;
+   constexpr T next_bit_permutation(T x) noexcept;
+ template&lt;class T&gt;
+   constexpr T compress_bitsr(T x, T m) noexcept;
+ template&lt;class T&gt;
+   constexpr T expand_bitsr(T x, T m) noexcept;
+ template&lt;class T&gt;
+   constexpr T compress_bitsl(T x, T m) noexcept;
+ template&lt;class T&gt;
+   constexpr T expand_bitsl(T x, T m) noexcept;
</ins></code></pre>
</blockquote>


## New subclause ## {#proposed-new-subclause}

In subclause 22.15 [bit], add the following subclause:

<blockquote>
<p>
    **Permutation [bit.permute]**
</p>
<p>
    1 In the following descriptions, let *N* denote `numeric_limits<T>​::​digits`.
    Let &alpha;<sub>*n*</sub>
    denote the *n*-th least significant bit of <code>&alpha;</code>, so that <code>&alpha;</code> equals
    <span title="\sum_{n=0}^{N-1}{\alpha_n 2^n}">
        <svg alt="\sum_{n=0}^{N-1}{\alpha_n 2^n}" xmlns="http://www.w3.org/2000/svg" width="69.736px" height="53.920px" viewBox="0 -1733 3852.8 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"><defs><path id="MJX-13-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-13-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-13-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-13-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-13-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-13-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-13-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-13-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-13-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(43.8,0)"><use data-c="2211" xlink:href="#MJX-13-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(101.8,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-13-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="3D" xlink:href="#MJX-13-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="30" xlink:href="#MJX-13-TEX-N-30"></use></g></g><g data-mml-node="TeXAtom" transform="translate(0,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-13-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(888,0)"><use data-c="2212" xlink:href="#MJX-13-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1666,0)"><use data-c="31" xlink:href="#MJX-13-TEX-N-31"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1698.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-13-TEX-I-1D6FC"></use></g><g data-mml-node="mi" transform="translate(673,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-13-TEX-I-1D45B"></use></g></g><g data-mml-node="msup" transform="translate(1147.3,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-13-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-13-TEX-I-1D45B"></use></g></g></g></g></g></svg>    </span>
    </span>
</p>

<p>
```cpp
template<class T>
  constexpr T reverse_bits(T x) noexcept;
```
</p>
<p class="indent">
    2 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    3 *Returns*: <span title="\sum_{n=0}^{N-1}{x_n 2^{N-n-1}}">
        <svg alt="\sum_{n=0}^{N-1}{x_n 2^{N-n-1}}" xmlns="http://www.w3.org/2000/svg" width="106.184px" height="53.920px" viewBox="0 -1733 5866.5 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"><defs><path id="MJX-46-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-46-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-46-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-46-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-46-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-46-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-46-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-46-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-46-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(43.8,0)"><use data-c="2211" xlink:href="#MJX-46-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(101.8,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-46-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="3D" xlink:href="#MJX-46-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="30" xlink:href="#MJX-46-TEX-N-30"></use></g></g><g data-mml-node="TeXAtom" transform="translate(0,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-46-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(888,0)"><use data-c="2212" xlink:href="#MJX-46-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1666,0)"><use data-c="31" xlink:href="#MJX-46-TEX-N-31"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1698.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-46-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-46-TEX-I-1D45B"></use></g></g><g data-mml-node="msup" transform="translate(1079.3,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-46-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-46-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(888,0)"><use data-c="2212" xlink:href="#MJX-46-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(1666,0)"><use data-c="1D45B" xlink:href="#MJX-46-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(2266,0)"><use data-c="2212" xlink:href="#MJX-46-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3044,0)"><use data-c="31" xlink:href="#MJX-46-TEX-N-31"></use></g></g></g></g></g></g></svg>
    </span>
    <br>[*Note*: `reverse_bits(reverse_bits(x))` equals `x`. &mdash; *end note*]
</p>

<p>
```cpp
template<class T>
  constexpr T next_bit_permutation(T x) noexcept;
```
</p>
<p class="indent">
    4 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    5 *Returns*: The lowest integer `y` in (`x`, `numeric_limits<T>::max()]` for which
    `popcount(x)` equals `popcount(y)`, or `0` if none exists.
    <br>[*Note*: If `x` is a power of two or zero, `next_bit_permutation(x)`
    equals `x << 1`. &mdash; *end note*]
</p>


<p>
```cpp
template<class T>
  constexpr T compress_bitsr(T x, T m) noexcept;
```
</p>
<p class="indent">
    6 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    7 *Returns*:  <span title="\sum_{n=0}^{N-1}{m_n x_n 2^{(\sum_{k=0}^{n-1}m_k)}}">
        <svg alt="\sum_{n=0}^{N-1}{m_n x_n 2^{(\sum_{k=0}^{n-1}m_k)}}" xmlns="http://www.w3.org/2000/svg" width="146.576px" height="53.920px" viewBox="0 -1733 8098.2 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"><defs><path id="MJX-36-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-36-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-36-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-36-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-36-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-36-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-36-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-36-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-36-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-36-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-36-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-36-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-36-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-36-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(43.8,0)"><use data-c="2211" xlink:href="#MJX-36-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(101.8,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-36-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="3D" xlink:href="#MJX-36-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="30" xlink:href="#MJX-36-TEX-N-30"></use></g></g><g data-mml-node="TeXAtom" transform="translate(0,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-36-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(888,0)"><use data-c="2212" xlink:href="#MJX-36-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1666,0)"><use data-c="31" xlink:href="#MJX-36-TEX-N-31"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1698.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-36-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-36-TEX-I-1D45B"></use></g></g><g data-mml-node="msub" transform="translate(1385.3,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-36-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-36-TEX-I-1D45B"></use></g></g><g data-mml-node="msup" transform="translate(2464.5,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-36-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-36-TEX-N-28"></use></g><g data-mml-node="munderover" transform="translate(389,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-36-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-36-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="2212" xlink:href="#MJX-36-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="31" xlink:href="#MJX-36-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-36-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="3D" xlink:href="#MJX-36-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="30" xlink:href="#MJX-36-TEX-N-30"></use></g></g></g><g data-mml-node="msub" transform="translate(3022.6,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-36-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-36-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(4352,0)"><use data-c="29" xlink:href="#MJX-36-TEX-N-29"></use></g></g></g></g></g></g></svg>
    </span>
</p>

<p>
```cpp
template<class T>
  constexpr T expand_bitsr(T x, T m) noexcept;
```
</p>
<p class="indent">
    8 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    9 *Returns*:  <span title="\sum_{n=0}^{N-1}{m_n x_{(\sum_{k=0}^{n-1}m_k)} 2^n}">
        <svg alt="\sum_{n=0}^{N-1}{m_n x_{(\sum_{k=0}^{n-1}m_k)} 2^n}" xmlns="http://www.w3.org/2000/svg" width="146.576px" height="53.920px" viewBox="0 -1733 8098.2 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"><defs><path id="MJX-6-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-6-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-6-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-6-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-6-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-6-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-6-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-6-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-6-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-6-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-6-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(43.8,0)"><use data-c="2211" xlink:href="#MJX-6-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(101.8,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="3D" xlink:href="#MJX-6-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="30" xlink:href="#MJX-6-TEX-N-30"></use></g></g><g data-mml-node="TeXAtom" transform="translate(0,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-6-TEX-I-1D441"></use></g><g data-mml-node="mo" transform="translate(888,0)"><use data-c="2212" xlink:href="#MJX-6-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1666,0)"><use data-c="31" xlink:href="#MJX-6-TEX-N-31"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1698.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-6-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g><g data-mml-node="msub" transform="translate(1385.3,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-6-TEX-I-1D465"></use></g><g data-mml-node="TeXAtom" transform="translate(605,-316.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="munderover" transform="translate(389,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-6-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600,0)"><use data-c="2212" xlink:href="#MJX-6-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1378,0)"><use data-c="31" xlink:href="#MJX-6-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-6-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="3D" xlink:href="#MJX-6-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="30" xlink:href="#MJX-6-TEX-N-30"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3022.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-6-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(911,-150) scale(0.707)"><use data-c="1D458" xlink:href="#MJX-6-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(4352,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g></g></g><g data-mml-node="msup" transform="translate(7090.9,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-6-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g></g></g></svg>
    </span>
    <br>[*Note*:
    If `x & ~m` equals zero, then `expand_bitsr(compress_bitsr(x, m), m)` equals `x`.
    If `x >> popcount(m)` equals zero, then `compress_bitsr(expand_bitsr(x, m), m)` equals `x`.
    &mdash; *end note*]
</p>

<p>
```cpp
template<class T>
  constexpr T compress_bitsl(T x, T m) noexcept;
```
</p>
<p class="indent">
    10 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    11 *Returns*:  `reverse_bits(compress_bitsr(reverse_bits(x), reverse_bits(m)))`.
</p>

<p>
```cpp
template<class T>
  constexpr T expand_bitsl(T x, T m) noexcept;
```
</p>
<p class="indent">
    10 *Constraints*: `T` is an unsigned integer type ([basic.fundamental]).
</p>
<p class="indent">
    11 *Returns*:  `reverse_bits(expand_bitsr(reverse_bits(x), reverse_bits(m)))`.
</p>
</blockquote>

Note: I would have preferred a less mathematical approach to defining these functions.
      However, it is too difficult to precisely define `compress_bits` and `expand_bits` without
      visual aids, pseudo-code, or other crutches.





# Acknowledgements # {#acknowledgements}

I greatly appreciate the assistance of Stack Overflow users in assisting me with research for
this proposal. 
I especially thank Peter Cordes for his tireless and selfess dedication to sharing knowledge.

I also thank various Discord users from
[Together C & C++](https://discord.com/invite/tccpp) and
[#include&lt;C++&gt;](https://www.includecpp.org/discord/) who have reviewed drafts of
this proposal and shared their thoughts.


<pre class=biblio>
{
    "ARM1": {
        "authors": ["Arm Developer Community"],
        "href": "https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/102340_0001_02_en_introduction-to-sve2.pdf?revision=b208e56b-6569-4ae2-b6f3-cd7d5d1ecac3",
        "title": "Introduction to SVE2, Issue 02, Revision 02"
    },
    "ChessProgramming1": {
        "authors": ["VA"],
        "title": "chessprogramming.org/BMI2, Applications",
        "href": "https://www.chessprogramming.org/BMI2#Applications"
    },
    "StackOverflow1": {
        "authors": ["Jan Schultke et al."],
        "title": "What is a fast fallback algorithm which emulates PDEP and PEXT in software?",
        "href": "https://stackoverflow.com/q/77834169/5740428",
        "publisher": "Stack Overflow"
    },
    "Anderson1": {
        "authors": ["Sean Eron Anderson"],
        "title": "Bit Twiddling Hacks",
        "href": "https://graphics.stanford.edu/~seander/bithacks.html",
        "publisher": "Stanford University"
    },
    "Schultke1": {
        "authors": ["Jan Schultke"],
        "title": "C++26 Bit Permutations",
        "href": "https://github.com/Eisenwave/cxx26-bit-permutations",
        "publisher": "GitHub"
    },
    "Warren1": {
        "authors": ["Henry S. Warren, Jr."],
        "title": "Hacker's Delight, 2nd Edition",
        "publisher": "Addision-Wesley",
        "type": "Book",
        "chapter": "7-4, 7-5"
    },
    "Zp7": {
        "authors": ["Zach Wegner"],
        "title": "Zach's Peppy Parallel-Prefix-Popcountin' PEXT/PDEP Polyfill",
        "href": "https://github.com/zwegner/zp7",
        "publisher": "GitHub"
    },
    "P0553R4": {
        "authors": ["Jens Maurer"],
        "title": "Bit operations",
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html",
        "publisher": "WG21"
    },
    "P2664R6": {
        "authors": ["Daniel Towner", "Ruslan Arutyunyan"],
        "title": "Extend std::simd with permutation API",
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2664r6.html#permute_by_mask",
        "publisher": "WG21"
    },
    "GNU1": {
        "authors": ["Marc Glisse et al."],
        "href": "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=50481",
        "title": "Bug 50481 - builtin to reverse the bit order",
        "publisher": "GNU Project"
    },
    "N3864": {
        "authors": ["Matthew Fioravante"],
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3864.html",
        "title": "A constexpr bitwise operations library for C++",
        "publisher": "WG21"
    },
    "P0553R4": {
        "authors": ["Jens Maurer"],
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html",
        "title": "Bit operations",
        "publisher": "WG21"
    }
}
</pre>