\import{libwg21.cow}

\wg21-head[
    title = \tcode{partial_sort_n}\, \tcode{nth_element_n}
]{
\dl{
    \dt{Document number:} \dd{\docnum{P3735R0}}
    \dt{Date:}            \dd{\tt{2025-06-28}}
    \dt{Audience:}        \dd{SG9}
    \dt{Project:}         \dd{ISO/IEC 14882 Programming Languages â€” C++, ISO/IEC JTC1/SC22/WG21}
    \dt{Reply-to:}        \dd{Jan Schultke <\mail{janschultke@gmail.com}>}
    \dt{GitHub Issue:}    \dd{\ref[https://wg21.link/P3735/github]}
    \dt{Source:}          \dd{\ref[https://github.com/Eisenwave/cpp-proposals/blob/master/src/n-algorithms.cow]}
}
\hr
}

\Babstract{
The \tcode{partial_sort},
and \tcode{nth_element} algorithms
require the user to "manually offset" iterators,
which is neither ergonomic nor safe.
I propose \tcode{_n} variants of these algorithms
in the style of \tcode{shift_left}.
}

\h2[listed=no]{Contents}

\make-contents

\h2{Introduction}

Algorithms such as \tcode{std::ranges::partial_sort} accept a "middle iterator" that
must be in the range of iterators [\tcode{begin()},\N{NO-BREAK SPACE}\tcode{end()}].
For example, \tcode{ranges::partial_sort} is specified in \eelis{partial.sort} as follows:

\cppblock{
template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr I
    ranges::partial_sort(I first, I middle, S last, Comp comp = {}, Proj proj = {});
}
\cppblock{
template<random_access_range R, class Comp = ranges::less, class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr borrowed_iterator_t<R>
    ranges::partial_sort(R&& r, iterator_t<R> middle, Comp comp = {}, Proj proj = {});
}

There are problems with this interface, described below.

\h3{Middle iterators are unsafe}

A common use case for \tcode{partial_sort} or \tcode{nth_element} is to sort the \math{\mi{N}}
lowest elements or to obtain the \math{\msup{\mi{N}\mtext{th}}} lowest element,
where \math{\mi{N}} is an integer that is constant, obtained from a config file,
or otherwise independent of the range.
This invites a common bug,
which I have witnessed multiple times:

\Bug{
The following code has undefined behavior.
\cppblock{
const int n = 10;
// ...

// usually obtained from user input, configs, etc.:
int scores[] { 5, 2, 8, 0, 3 };
// now, to obtain the 10 greatest scores:
std::partial_sort(scores,
                  scores + n, // \N{FACE SCREAMING IN FEAR} undefined behavior
                  std::end(scores),
                  std::greater<int>{});
// same bug with std::ranges:
std::ranges::partial_sort(scores, scores + n, std::ranges::greater{});
}
}

The underlying problem is that to use the algorithm,
we need to offset the start iterator,
and this can fall outside of the range of iterators [\tcode{begin()}, \tcode{end()}].

A possible safe alternative which would have prevented the bug above is
\cppblock{
std::ranges::partial_sort(scores,
                          std::ranges::next(scores, n, std::ranges::end(scores)),
                          std::ranges::greater{});
}
However, this is neither ergonomic nor does it address the cause of the bug.
The bug was caused by the user not remembering that \tcode{scores + n} can be undefined,
and by the interface encouraging them to write this expression.
Why should we expect the user to know of and consistently use this workaround then?

Users generally prefer to use to "path of least resistance",
and we should make that path safe:
\cppblock{
// OK, even if n is greater than the size of the range
std::ranges::partial_sort_n(scores, n, std::ranges::greater{});
}

\h3{Middle iterators are annoying}

Since we need to obtain the middle iterator from the range
but also provide the range to \tcode{partial_sort_n},
we may have to repeat ourselves.

\Bex{
Say we want to obtain the \math{\mi{N}} lowest scores similar to the bug above,
but the scores are obtained from a function instead:
\cppblock{
namespace rgs = std::ranges;
some_range& long_function_to_get_scores_range();

// without a variable:
rgs::partial_sort(long_function_to_get_scores_range(),
    rgs::next(rgs::begin(long_function_to_get_scores_range()), n, // \N{CLOWN FACE} seriously?
             rgs::end(long_function_to_get_scores_range())),
    rgs::greater{});

// with a variable:
some_range& r = long_function_to_get_scores_range();
rgs::partial_sort(r, rgs::next(rgs::begin(r), n, rgs::end(r)), rgs::greater{});
}
}

Either options is somewhat annoying if it could theoretically be written as:
\cppblock{
rgs::partial_sort_n(long_function_to_get_scores_range(), n, rgs::greater{});
}

One key benefit of \tcode{std::ranges} is that we rarely have to work with
iterators directly anymore.
Requiring the user to provide middle iterators somewhat defeats this design strategy.

\h2{Scope}

To address the problems above,
I propose the following additional algorithms:

\ul{
\li{\tcode{partial_sort_n}}
\li{\tcode{nth_element_n}}
}

These should exist both for the \tcode{std::ranges::} and the \tcode{std::} algorithms,
as they provide a "safety/ergonomics hotfix" for anyone
who has not migrated to these "new" algorithms yet,
and is perhaps unable to
because their iterators would not satisfy the \tcode{std::ranges} constraints.

While there are more algorithms that accept middle iterators,
they do not exclusively operate on random access iterators,
which results in different design concerns.
There is also no proposed overload for \tcode{partial_sort_copy}
because its result can already be specified as a range or iterator pair,
so the concerns in \ref[#middle-iterators-are-unsafe] do not apply.

\Bdecision{
Depending on SG9 feedback,
the scope of this paper could be widened to provide alternatives to middle iterators
across \header{algorithm} as a whole.
}

\h2{Design}

While the names follow the scheme of \tcode{copy_n},
the design is essentially copied from \tcode{shift_left},
which is the \tcode{_n} counterpart to \tcode{rotate}.
\tcode{copy_n} takes an iterator and the size of the range,
without an end iterator,
and thus without any safety benefits.

The proposed functions would take either an iterator pair and a size,
or a range and a size,
just like \tcode{shift_left} and \tcode{shift_right}, and with similar interface.
See \eelis{alg.shift}.

\h2{Impact on existing code}

No existing code should be affected because the proposed functions are all new.
Existing overload sets are not modified.


\h2{Wording}

The proposed changes are relative to \ref[N5008].

In \eelis{version.syn},
add two feature-test macros as follows:

\Bins{
\itemdecl{
#define __cpp_lib_ranges_partial_sort_n \hl[number]{20XXXXL} // \serif{also in \tt{<algorithm>}}
#define __cpp_lib_ranges_nth_element_n  \hl[number]{20XXXXL} // \serif{also in \tt{<algorithm>}}
}
}

In \eelis{algorithm.syn},
change the synopsis of \header{algorithm} as follows:

\macro[\black_comment]{\hl[sym-punc]{//}\serif{\i{\hl[sym-punc]{ \put}}}}

\Bdiff{
\itemdecl{
namespace std {
  \html{[\N{HORIZONTAL ELLIPSIS}]}

  template<class RandomAccessIterator>
    constexpr void partial_sort(RandomAccessIterator first, RandomAccessIterator middle,
                                RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    constexpr void partial_sort(RandomAccessIterator first, RandomAccessIterator middle,
                                RandomAccessIterator last, Compare comp);
  template<class ExecutionPolicy, class RandomAccessIterator>
    void partial_sort(ExecutionPolicy&& exec,                   \black_comment{freestanding-deleted, see [algorithms.parallel.overloads]}
                      RandomAccessIterator first, RandomAccessIterator middle,
                      RandomAccessIterator last);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void partial_sort(ExecutionPolicy&& exec,                   \black_comment{freestanding-deleted, see [algorithms.parallel.overloads]}
                      RandomAccessIterator first, RandomAccessIterator middle,
                      RandomAccessIterator last, Compare comp);

  namespace ranges {
    template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
             class Proj = identity>
      requires sortable<I, Comp, Proj>
      constexpr I
        partial_sort(I first, I middle, S last, Comp comp = {}, Proj proj = {});
    template<random_access_range R, class Comp = ranges::less, class Proj = identity>
      requires sortable<iterator_t<R>, Comp, Proj>
      constexpr borrowed_iterator_t<R>
        partial_sort(R&& r, iterator_t<R> middle, Comp comp = {},
                     Proj proj = {});
  }

  \ins{template<class RandomAccessIterator>
    void partial_sort_n(RandomAccessIterator first, RandomAccessIterator last,
                        typename iterator_traits<RandomAccessIterator>::difference_type n);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void partial_sort_n(ExecutionPolicy&& exec,                 // \serif{freestanding-deleted, see [algorithms.parallel.overloads]}
                        RandomAccessIterator first, RandomAccessIterator last,
                        typename iterator_traits<RandomAccessIterator>::difference_type n);
  template<class RandomAccessIterator, class Compare>
    void partial_sort_n(RandomAccessIterator first, RandomAccessIterator last,
                        typename iterator_traits<RandomAccessIterator>::difference_type n,
                        Compare comp);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void partial_sort_n(ExecutionPolicy&& exec,                 // \serif{freestanding-deleted, see [algorithms.parallel.overloads]}
                        RandomAccessIterator first, RandomAccessIterator last,
                        typename iterator_traits<RandomAccessIterator>::difference_type n,
                        Compare comp);
  
  namespace ranges {
    template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
             class Proj = identity>
      requires sortable<I, Comp, Proj>
      constexpr I
        partial_sort_n(I first, iter_difference_t<I> n, S last, Comp comp = {}, Proj proj = {});
    template<random_access_range R, class Comp = ranges::less, class Proj = identity>
      requires sortable<iterator_t<R>, Comp, Proj>
      constexpr borrowed_iterator_t<R>
        partial_sort_n(R&& r, ranges::range_difference_t<R> n, Comp comp = {}, Proj proj = {});
  }}

  \html{[\N{HORIZONTAL ELLIPSIS}]}

  \black_comment{[alg.nth.element] Nth element}
  template<class RandomAccessIterator>
    constexpr void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                               RandomAccessIterator last);
  template<class RandomAccessIterator, class Compare>
    constexpr void nth_element(RandomAccessIterator first, RandomAccessIterator nth,
                               RandomAccessIterator last, Compare comp);
  template<class ExecutionPolicy, class RandomAccessIterator>
    void nth_element(ExecutionPolicy&& exec,                    \black_comment{freestanding-deleted, see [algorithms.parallel.overloads]}
                     RandomAccessIterator first, RandomAccessIterator nth,
                     RandomAccessIterator last);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void nth_element(ExecutionPolicy&& exec,                    \black_comment{freestanding-deleted, see [algorithms.parallel.overloads]}
                     RandomAccessIterator first, RandomAccessIterator nth,
                     RandomAccessIterator last, Compare comp);
  
  namespace ranges {
    template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
             class Proj = identity>
      requires sortable<I, Comp, Proj>
      constexpr I
        nth_element(I first, I nth, S last, Comp comp = {}, Proj proj = {});
    template<random_access_range R, class Comp = ranges::less, class Proj = identity>
      requires sortable<iterator_t<R>, Comp, Proj>
      constexpr borrowed_iterator_t<R>
        nth_element(R&& r, iterator_t<R> nth, Comp comp = {}, Proj proj = {});
  }

  \ins{template<class RandomAccessIterator>
    void nth_element_n(RandomAccessIterator first, RandomAccessIterator last,
                       typename iterator_traits<RandomAccessIterator>::difference_type n);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void nth_element_n(ExecutionPolicy&& exec, RandomAccessIterator first,
                       RandomAccessIterator last,
                       typename iterator_traits<RandomAccessIterator>::difference_type n);
  template<class RandomAccessIterator, class Compare>
    void nth_element_n(RandomAccessIterator first, RandomAccessIterator last,
                       typename iterator_traits<RandomAccessIterator>::difference_type n,
                       Compare comp);
  template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
    void nth_element_n(ExecutionPolicy&& exec, RandomAccessIterator first,
                       RandomAccessIterator last,
                       typename iterator_traits<RandomAccessIterator>::difference_type n,
                       Compare comp);
  
  namespace ranges {
    template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
             class Proj = identity>
      requires sortable<I, Comp, Proj>
      constexpr I
        nth_element_n(I first, S last, iter_difference_t<I> n, Comp comp = {}, Proj proj = {});
    template<random_access_range R, class Comp = ranges::less, class Proj = identity>
      requires sortable<iterator_t<R>, Comp, Proj>
      constexpr borrowed_iterator_t<R>
        nth_element_n(R&& r, ranges::range_difference_t<R> n, Comp comp = {}, Proj proj = {});
  }}

  \html{[\N{HORIZONTAL ELLIPSIS}]}
}
}
}

In \eelis{partial.sort},
append the following items at the end of the subclause:

\Bins{
\itemdecl{
template<class RandomAccessIterator>
  void partial_sort_n(RandomAccessIterator first, RandomAccessIterator last,
                      typename iterator_traits<RandomAccessIterator>::difference_type n);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void partial_sort_n(ExecutionPolicy&& exec,
                      RandomAccessIterator first, RandomAccessIterator last,
                      typename iterator_traits<RandomAccessIterator>::difference_type n);
template<class RandomAccessIterator, class Compare>
  void partial_sort_n(RandomAccessIterator first, RandomAccessIterator last,
                      typename iterator_traits<RandomAccessIterator>::difference_type n,
                      Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void partial_sort_n(ExecutionPolicy&& exec,
                      RandomAccessIterator first, RandomAccessIterator last,
                      typename iterator_traits<RandomAccessIterator>::difference_type n,
                      Compare comp);
}

\itemdescr{
\effects
Equivalent to calling \tcode{partial_sort}
with all parameters excluding \tcode{n} in the same order,
except that \nobr{\tcode{first + min<Size>(n, last - first)}} is
provided as an argument for the \tcode{middle} parameter in \tcode{partial_sort}.
}

\itemdecl{
template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr I
    ranges::partial_sort_n(I first, iter_difference_t<I> n, S last, Comp comp = {},
                           Proj proj = {});
}

\itemdescr{
\effects
Equivalent to:
\Bindent{
\tcode{return ranges::partial_sort(first, ranges::next(first, n, last), last, comp, proj);}
}
}

\itemdecl{
template<random_access_range R, class Comp = ranges::less, class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr borrowed_iterator_t<R>
    ranges::partial_sort_n(R&& r, ranges::range_difference_t<R> n, Comp comp = {},
                           Proj proj = {});
}

\itemdescr{
\effects
Equivalent to:
\Bindent{
\tcode{return ranges::partial_sort_n(ranges::begin(r), n, ranges::end(r), comp, proj);}
}
}
}

In \eelis{alg.nth.element},
append the following items at the end of the subclause:

\Bins{
\itemdecl{
template<class RandomAccessIterator>
  void nth_element_n(RandomAccessIterator first, RandomAccessIterator last,
                     typename iterator_traits<RandomAccessIterator>::difference_type n);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void nth_element_n(ExecutionPolicy&& exec, RandomAccessIterator first,
                     RandomAccessIterator last,
                     typename iterator_traits<RandomAccessIterator>::difference_type n);
template<class RandomAccessIterator, class Compare>
  void nth_element_n(RandomAccessIterator first, RandomAccessIterator last,
                     typename iterator_traits<RandomAccessIterator>::difference_type n,
                     Compare comp);
template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
  void nth_element_n(ExecutionPolicy&& exec, RandomAccessIterator first,
                     RandomAccessIterator last,
                     typename iterator_traits<RandomAccessIterator>::difference_type n,
                     Compare comp);
}

\itemdescr{
\effects
Equivalent to calling \tcode{nth_element}
with all parameters excluding \tcode{n} in the same order,
except that \nobr{\tcode{first + min<Size>(n, last - first)}} is
provided as an argument for the \tcode{nth} parameter in \tcode{nth_element}.
}

\itemdecl{
template<random_access_iterator I, sentinel_for<I> S, class Comp = ranges::less,
         class Proj = identity>
  requires sortable<I, Comp, Proj>
  constexpr I
    ranges::nth_element_n(I first, S last, iter_difference_t<I> n, Comp comp = {},
                          Proj proj = {});
}

\itemdescr{
\effects
Equivalent to:
\Bindent{
\tcode{return ranges::nth_element(first, ranges::next(first, n, last), last, comp, proj);}
}
}

\itemdecl{
template<random_access_range R, class Comp = ranges::less, class Proj = identity>
  requires sortable<iterator_t<R>, Comp, Proj>
  constexpr borrowed_iterator_t<R>
    ranges::nth_element_n(R&& r, ranges::range_difference_t<R> n, Comp comp = {},
                          Proj proj = {});
}

\itemdescr{
\effects
Equivalent to:
\Bindent{
\tcode{return ranges::nth_element_n(ranges::begin(r), n, ranges::end(r), comp, proj);}
}
}
}


\h2{References}

\bib[
  id = N5008,
  title = Working Draft\, Programming Languages â€” C++,
  date = 2025-03-15,
  author = Thomas KÃ¶ppe,
  link = https://wg21.link/n5008,
  long-link = https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2025/n5008.pdf
]

\make-bib
