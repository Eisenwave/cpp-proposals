<pre class='metadata'>
Title: More bitset operations
Shortname: P3103
Revision: 0
Status: P
Date: 2024-01-24
Group: WG21
Audience: LEWGI, LEWG
Editor: Jan Schultke, janschultke@gmail.com
ED: https://eisenwave.github.io/cpp-proposals/more-bitset-operations-p3103r0.html
!Source: [eisenwave/cpp-proposals](https://github.com/Eisenwave/cpp-proposals/blob/master/src/more-bitset-operations.bs)
Markup Shorthands: markdown on
Abstract: This paper proposes adding a counterpart `std::bitset` member function for the utility
          functions in `<bit>`.
</pre>

# Introduction # {#intro}

[[P0553R4]] added the bit manipulation library to C++20, which introduced many useful utility
functions.

Some of these already have a counterpart in `std::bitset` (such as `popcount` as `bitset::count`),
but not nearly all of them.
This leaves `bitset` overall lacking in functionality,
which is unfortunate because `std::bitset` is an undeniably useful container.
At the time of writing, it is used in 73K files on GitHub; see [[GitHub1]].

`std::bitset` does not (and should not) expose the underlying integer sequence of the implementation.
Therefore, it is not possible for the user to implement these operations efficiently themselves.


# Proposed changes # {#proposed-changes}

For each of the functions from the bit manipulation library that are not yet available
in `std::bitset`, add a member function.
Add a small amount of further useful member functions.

<style>
th {
    text-align: left;
}
</style>

<table>
<tr>
<th>`<bit>` function</th><th>Proposed `bitset` member</th>
<tr>
    <td>`std::has_single_bit(T)`</td>
    <td>`one()`</td>
</tr>
<tr>
    <td>`std::countl_zero(T)`</td>
    <td>`countl_zero()`</td>
</tr>
<tr>
    <td></td>
    <td>`countl_zero(size_t)`</td>
</tr>
<tr>
    <td>`std::countl_one(T)`</td>
    <td>`countl_one()`</td>
</tr>
<tr>
    <td></td>
    <td>`countl_one(size_t)`</td>
</tr>
<tr>
    <td>`std::countr_zero(T)`</td>
    <td>`countr_zero()`</td>
</tr>
<tr>
    <td></td>
    <td>`countr_zero(size_t)`</td>
</tr>
<tr>
    <td>`std::countr_one(T)`</td>
    <td>`countr_one()`</td>
</tr>
<tr>
    <td></td>
    <td>`countr_one(size_t)`</td>
</tr>
<tr>
    <td>`std::rotl(T, int)`</td>
    <td>`rotl(size_t)`</td>
</tr>
<tr>
    <td>`std::rotr(T, int)`</td>
    <td>`rotr(size_t)`</td>
</tr>
<tr>
    <td></td>
    <td>`reverse()`</td>
</tr>
</tr>

</table>

The additional overloads for the counting functions allow counting from a starting position.
This can be useful for iterating over all set bits:
```cpp
bitset<128> bits;
for (size_t i = 0; i != 128; ++i) {
    i += bits.countr_zero(i);
    if (i == 128) break;
    // ...
}
```

Note: `byteswap` and `bit_cast` counterparts are not proposed, only functions solely
dedicated to the manipulation of bit sequences.


# Design considerations # {#design}

The naming of the member functions is based on the naming scheme in the `<bit>` header.

## `reverse` ## {#reverse}

`reverse` is a notable exception, which does not yet exist in `<bit>`.
This function is added because the method for reversing integers may be tremendously faster than
doing so bit by bit.
ARM has a dedicated `RBIT` instruction for reversing bits, which could be leveraged.

I have written a not yet published proposal [[Schultke1]]
which adds a corresponding bit-reversal function to `<bit>`.

## Counting overloads ## {#counting-overloads}

`countl_zero`, `countr_zero`, `countl_one`, and `countr_one`
are overloaded member functions which take a `size_t` argument or nothing.

This is preferrable to a single member function with a defaulted argument because the overloads
have different `noexcept` specifications.
The overloads which take no arguments have a wide constract and can be marked `noexcept`,
whereas the overloads taking `size_t` may throw `out_of_range`.


# Impact on existing code # {#impact-on-existing-code}

The semantics of existing `bitset` member functions remain unchanged, and no existing valid code
is broken.

This proposal is purely an extension of the functionality of `bitset`.



# Implementation experience # {#implementation-experience}

[[Bontus1]] provides  a `std::bitset` implementation which supports most proposed features.
There are no obvious obstacles to implementing the new features in common standard library
implementations.


# Proposed wording # {#proposed-wording}

<style>
blockquote p {
    margin-left: 2em;
}

ins {
    background: rgba(136, 255, 93, 0.2);
    color: inherit;
    text-decoration: none;
}
del {
    background: rgba(255, 93, 93, 0.2);
    color: inherit;
    text-decoration: strikethrough;
}
</style>

The proposed changes are relative to the working draft of the standard as of [[!N4917]].

Modify the header synopsis in subclause 17.3.2 [version.syn] as follows:

<blockquote>
<pre><code>
#define __cpp_lib_bitset                            <del>202306L</del><ins>20XXXXL</ins> // also in &lt;bitset&gt;
</code></pre>
</blockquote>

Modify the header synopsis in subclause 22.9.2.1 [template.bitset.general] as follows:

<blockquote>
<pre><code>
namespace std {
  template&lt;size_t N&gt; class bitset {
  public:
    // bit reference
    [...]

    // [bitset.members], bitset operations
    constexpr bitset& operator&=(const bitset& rhs) noexcept;
    constexpr bitset& operator|=(const bitset& rhs) noexcept;
    constexpr bitset& operator^=(const bitset& rhs) noexcept;
    constexpr bitset& operator&lt;&lt;=(size_t pos) noexcept;
    constexpr bitset& operator&gt;&gt;=(size_t pos) noexcept;
    constexpr bitset  operator&lt;&lt;(size_t pos) const noexcept;
    constexpr bitset  operator&gt;&gt;(size_t pos) const noexcept;
<ins>+   constexpr bitset& rotl(size_t pos) noexcept;
+   constexpr bitset& rotr(size_t pos) noexcept;
+   constexpr bitset& reverse() noexcept;</ins>
    constexpr bitset& set() noexcept;
    constexpr bitset& set(size_t pos, bool val = true);
    constexpr bitset& reset() noexcept;
    constexpr bitset& reset(size_t pos);
    constexpr bitset  operator~() const noexcept;
    constexpr bitset& flip() noexcept;
    constexpr bitset& flip(size_t pos);

    // element access
    [...]

    // observers
    constexpr size_t count() const noexcept;
<ins>+   constexpr size_t countl_zero() const noexcept;
+   constexpr size_t countl_zero(size_t pos) const;
+   constexpr size_t countl_one() const noexcept;
+   constexpr size_t countl_one(size_t pos) const;
+   constexpr size_t countr_zero() const noexcept;
+   constexpr size_t countr_zero(size_t pos) const;
+   constexpr size_t countr_one() const noexcept;
+   constexpr size_t countr_one(size_t pos) const;</ins>
    constexpr size_t size() const noexcept;
    constexpr bool operator==(const bitset& rhs) const noexcept;
    constexpr bool test(size_t pos) const;
    constexpr bool all() const noexcept;
    constexpr bool any() const noexcept;
    constexpr bool none() const noexcept;
<ins>+   constexpr bool one() const noexcept;</ins>
  };

  // [bitset.hash], hash support
  template&lt;class T&gt; struct hash;
  template&lt;size_t N&gt; struct hash&lt;bitset&lt;N&gt;&gt;;
}</code></pre>
</blockquote>

Modify subclause 22.9.2.3 [bitset.members] as follows:

<blockquote>
<code><pre>constexpr bitset operator>>(size_t pos) const noexcept;</pre></code>
<p>
    *Returns*: `bitset(*this) >>= pos`.
</p>

<code><pre><ins>constexpr bitset& rotl(size_t pos) noexcept;</ins></pre></code>
<p>
    <ins>*Effects*: Replaces each bit at position `I` in `*this` with
    the bit at position `(N - pos % N + I) % N`,
    where all arithmetic is performed using a hypothetical unsigned integer type
    which is at least one bit wider than `size_t`.</ins>
</p>
<p>
    <ins>*Returns*: `*this`.</ins>
</p>

<code><pre><ins>constexpr bitset& rotr(size_t pos) noexcept;</ins></pre></code>
<p>
    <ins>*Effects*: Replaces each bit at position `I` in `*this` with
    the bit at position `(pos + I) % N`,
    where all arithmetic is performed using a hypothetical unsigned integer type
    which is at least one bit wider than `size_t`.</ins>
</p>
<p>
    <ins>*Returns*: `*this`.</ins>
</p>

<code><pre><ins>constexpr bitset& reverse() noexcept;</ins></pre></code>
<p>
    <ins>*Effects*: Replaces each bit at position `I` in `*this` with
    the bit at position `N - I - 1`.</ins>
</p>
<p>
    <ins>*Returns*: `*this`.</ins>
</p>

<p>
    [...]
</p>

<code><pre>constexpr bitset& count() noexcept;</pre></code>
<p>
    *Returns*: A count of the number of bits set in `*this`.
</p>

<code><pre><ins>constexpr size_t countl_zero(size_t pos) const;</ins></pre></code>
<p>
    <ins>*Returns*: The number of consecutive zero-bits in `*this`,
    starting at position `pos`,
    and traversing `*this` in decreasing position direction.</ins>
</p>
<p>
    <ins>*Throws*: `out_of_range` if `pos` does not correspond to a valid bit position.</ins>
</p>

<code><pre><ins>constexpr size_t countl_zero() const noexcept;</ins></pre></code>
<p>
    <ins>*Returns*: `countl_zero(N - 1)`.</ins>
</p>

<code><pre><ins>constexpr size_t countl_one(size_t pos) const;</ins></pre></code>
<p>
    <ins>*Returns*: The number of consecutive one-bits in `*this`,
    starting at position `pos`,
    and traversing `*this` in decreasing position direction.</ins>
</p>
<p>
    <ins>*Throws*: `out_of_range` if `pos` does not correspond to a valid bit position.</ins>
</p>

<code><pre><ins>constexpr size_t countl_one() const noexcept;</ins></pre></code>
<p>
    <ins>*Returns*: `countl_one(N - 1)`.</ins>
</p>

<code><pre><ins>constexpr size_t countr_zero(size_t pos) const;</ins></pre></code>
<p>
    <ins>*Returns*: The number of consecutive zero-bits in `*this`,
    starting at position `pos`,
    and traversing `*this` in increasing position direction.</ins>
</p>
<p>
    <ins>*Throws*: `out_of_range` if `pos` does not correspond to a valid bit position.</ins>
</p>

<code><pre><ins>constexpr size_t countr_zero() const noexcept;</ins></pre></code>
<p>
    <ins>*Returns*: `countr_zero(0)`.</ins>
</p>

<code><pre><ins>constexpr size_t countr_one(size_t pos) const;</ins></pre></code>
<p>
    <ins>*Returns*: The number of consecutive one-bits in `*this`,
    starting at position `pos`,
    and traversing `*this` in increasing position direction.</ins>
</p>
<p>
    <ins>*Throws*: `out_of_range` if `pos` does not correspond to a valid bit position.</ins>
</p>

<code><pre><ins>constexpr size_t countr_one() const noexcept;</ins></pre></code>
<p>
    <ins>*Returns*: `countr_one(0)`.</ins>
</p>

<p>
    [...]
</p>

<code><pre>constexpr bool none() const noexcept;</pre></code>
<p>
    *Returns*: `count() == 0`.
</p>

<code><pre><ins>constexpr bool one() const noexcept;</ins></pre></code>
<p>
    <ins>*Returns*: `count() == 1`.</ins>
</p>
</blockquote>

Note: The use of a hypothetical integer type in the specification of `rotl` and `rotr` is necessary
      because `(I + pos) % N` would be incorrect when `I + pos` wraps.

<pre class=biblio>
{
    "Bontus1": {
        "authors": ["Claas Bontus", "d-xo", "zencatalyst"],
        "title": "bitset2: bitset improved",
        "href": "https://github.com/ClaasBontus/bitset2",
        "publisher": "GitHub"
    },
    "Github1": {
        "authors": ["GitHub Code Search"],
        "title": "std::bitset language:c++",
        "href": "https://github.com/search?type=code&auto_enroll=true&q=%22std%3A%3Abitset%22+language%3Ac%2B%2B&p=1",
        "publisher": "Microsoft"
    },
    "P0553R4": {
        "authors": ["Jens Maurer"],
        "title": "Bit operations",
        "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html",
        "publisher": "WG21"
    },
    "Schultke1": {
        "authors": ["Jan Schultke"],
        "title": "Bit permutations",
        "href": "https://eisenwave.github.io/cpp-proposals/bit-permutations.html",
        "publisher": "GitHub Pages"
    }
}
</pre>